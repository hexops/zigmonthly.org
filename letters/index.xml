<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Letters on Zig monthly</title><link>https://zigmonthly.org/letters/</link><description>Recent content in Letters on Zig monthly</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Jul 2022 00:00:00 -0700</lastBuildDate><atom:link href="https://zigmonthly.org/letters/index.xml" rel="self" type="application/rss+xml"/><item><title>Zig is becoming more production-worthy</title><link>https://zigmonthly.org/letters/2022/may-june/</link><pubDate>Mon, 04 Jul 2022 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2022/may-june/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/177217687-b47d897a-2516-4df8-b0df-de120552fc53.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/177217687-b47d897a-2516-4df8-b0df-de120552fc53.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="how-zig-is-used-at-uber">How Zig is used at Uber&lt;/h1>
&lt;a href="https://www.youtube.com/watch?v=SCj2J3HcEfc">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/177207028-843df8cd-4638-487d-9916-997ac888295b.png">&lt;/img>
&lt;/a>
&lt;p>At the start of the year the Zig Software Foundation &lt;a href="https://ziglang.org/news/financials-update/">recieved&lt;/a> a small ~$50k USD support contract from Uber.&lt;/p>
&lt;p>In this talk, Uber engineer Motiejus JakÅ¡tys describes developing bazel-zig-cc, a drop-in C/C++ toolchain for Bazel using Zig, how he onboarded Uber to use it, as well as how Google and CloudFlare also appear to be using it.&lt;/p>
&lt;p>If you liked that, be sure to check out these articles:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/kristoff/building-sqlite-with-cgo-for-every-os-4cic">Building SQLite with CGo for (almost) every OS&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/usm1ku/zgo_calling_zig_fnostage1_from_go/">ZGo: Calling Zig from Go&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://renato.athaydes.com/posts/testing-building-c-with-zig.html">Testing and building C projects with Zig&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="stage2-compiler-rapidly-approaching">Stage2 compiler rapidly approaching&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/andy_kelley/status/1542667210602057728">&lt;img width="594" alt="image" src="https://user-images.githubusercontent.com/3173176/177212829-f859c9e0-7390-4689-8283-ca62e00cd7bf.png">&lt;/a>&lt;/p>
&lt;p>The multi-year effort to switch away from Zig&amp;rsquo;s old stage1 C++ compiler to the new stage2 compiler written in Zig has really been progressing recently. (&lt;a href="https://github.com/ziglang/zig/issues/89">tracking issue #89&lt;/a>)&lt;/p>
&lt;p>Although it&amp;rsquo;s not ready for prime time yet, and not advised to test with it yet as many bugs are already known, we&amp;rsquo;re already seeing &lt;a href="https://github.com/hexops/mach/issues/180">it can compile parts of some major projects with a bit of finangling&lt;/a>.&lt;/p>
&lt;h3 id="heres-why-stage2-is-such-an-important-milestone">Here&amp;rsquo;s why stage2 is such an important milestone&lt;/h3>
&lt;ul>
&lt;li>Once the compiler is written in Zig, a large portion of the community that wouldn&amp;rsquo;t have been able/willing to dive into a C++ codebase before will now be able to help out.&lt;/li>
&lt;li>It will fix &lt;em>numerous&lt;/em> known issues, especially around comptime - enabling some new interesting ways of using Zig metaprogramming.&lt;/li>
&lt;li>The core team will then be able to begin thinking about:
&lt;ul>
&lt;li>Major language changes &amp;amp; what 1.0 might look like in the future&lt;/li>
&lt;li>Exploring adding more safety to the language&lt;/li>
&lt;li>Stabilizing the standard library&lt;/li>
&lt;li>Exploring hot-code-swapping&lt;/li>
&lt;li>Other performance wins&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="porting-my-game-to-the-web">&amp;ldquo;Porting my game to the web&amp;rdquo;&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/177208004-6d81933c-004e-4643-a20f-60f9bfd6f065.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/177208804-dc723209-c957-44ec-bc4c-945b2885f779.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Samarth Hattangady wrote &lt;a href="https://zig.news/samhattangady/porting-my-game-to-the-web-4194">an excellent article of their experience&lt;/a> porting their game to the web using Zig&amp;rsquo;s WASM support and WebGL.&lt;/p>
&lt;p>They&amp;rsquo;re looking for playtesters, so be sure to download the game on &lt;a href="https://chapliboy.itch.io/pirates">itch.io&lt;/a> and give your feedback if it looks interesting to you!&lt;/p>
&lt;h1 id="major-zig-conference-in-milan-italy">Major Zig conference in Milan, Italy&lt;/h1>
&lt;p>This is a conference you don&amp;rsquo;t want to miss: &lt;a href="https://sycl.it">SYCL 22&lt;/a> (Oct 7-10):&lt;/p>
&lt;blockquote>
&lt;p>Software You Can Love, &lt;em>a conference that celebrates the art of creating software for humans&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/3173176/177196710-139bef76-3aa2-4148-a7c4-4758ecef8b85.png" alt="image">&lt;/p>
&lt;p>It&amp;rsquo;s a new conference being ran by Loris Cro (VP of Community) and will be held in Milan, Italy, Oct 7-10, and features:&lt;/p>
&lt;ul>
&lt;li>Keynote speech from Andrew Kelley, a talk from Richard Feldman (remote)&lt;/li>
&lt;li>&lt;strong>Full day of Zig talks&lt;/strong>&lt;/li>
&lt;li>Mi&lt;em>LAN&lt;/em> PARTY day, where people behind popular community projects like the Zig Embedded Group, etc. will be chatting in a casual LAN-party-like setting&lt;/li>
&lt;li>SYCL Talks - The heart of the conference: Software You Can Love.&lt;/li>
&lt;li>Workshops&lt;/li>
&lt;/ul>
&lt;p>Full schedule will come out soon, and early bird pricing ends soon so &lt;a href="https://sycl.it/tickets">get your tickets now&lt;/a>!&lt;/p>
&lt;h1 id="article-of-the-month-how-i-built-zig-sqlite">Article of the month: &amp;ldquo;How I built zig-sqlite&amp;rdquo;&lt;/h1>
&lt;p>&lt;a href="https://rischmann.fr/blog/how-i-built-zig-sqlite">&amp;ldquo;How I built zig-sqlite&amp;rdquo;&lt;/a> is an excellent read for anyone looking to get a better understanding of Zig&amp;rsquo;s C interoperability as well as its powerful meta-programming capabilities.&lt;/p>
&lt;h1 id="cosmic-jswasm-runtime-developments">Cosmic JS/WASM runtime developments&lt;/h1>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/177211171-f3e875a8-d4be-45b4-b6ca-dde75dbd7f15.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/177211171-f3e875a8-d4be-45b4-b6ca-dde75dbd7f15.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/177210929-824f7ef5-6707-4623-8371-3fbd2eb1ba67.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>What if you could develop native applications in JavaScript or WASM, with a runtime that is not Electron? &lt;a href="https://github.com/fubark/cosmic">Cosmic&lt;/a> is one answer to that, and a project to keep an eye on for sure:&lt;/p>
&lt;blockquote>
&lt;p>a general purpose runtime for Javascript and WASM.&lt;/p>
&lt;p>It aims to have broad applications by exposing native cross platform APIs: window management, 2D/3D graphics, UI widgets, filesystem, networking, and more.&lt;/p>
&lt;/blockquote>
&lt;p>It recently gained &lt;a href="https://www.reddit.com/r/Zig/comments/v9mf32/vulkan_and_3d_graphics_in_cosmic/">3D model rendering via Vulkan&lt;/a>, &lt;a href="https://www.reddit.com/r/Zig/comments/ux95c8/updates_to_cosmic_graphics_text_ui/">Text and UI&lt;/a>, 3D animation, lighting, and PBR support (among other things):&lt;/p>
&lt;h1 id="ecosystem">Ecosystem&lt;/h1>
&lt;p>&lt;a href="https://allyourcodebase.com/">AllYourCodeBase.com&lt;/a> was launched as a sort of &amp;ldquo;are we X yet&amp;rdquo; for Zig, I helped contribute an excellent overview of the &lt;a href="https://allyourcodebase.com/gamedev/">Zig gamedev ecosystem&lt;/a> - check it out and contribute information to it, as well!&lt;/p>
&lt;h2 id="project-highlights">Project highlights&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/zigimg/zigimg">zigimg&lt;/a> continues to get improvements, with support for JPEG, PNG, QOI, TGA and more image formats.&lt;/li>
&lt;li>An IntelliJ and CLion Zig Support plugin, version 0.0.6, &lt;a href="https://zig.news/marioariasc/zig-support-plugin-for-intellij-and-clion-version-006-released-o68">was released.&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/lhp/easily-create-tui-programs-with-zig-spoon-project-demonstration-4k33">Easily create TUI programs with zig-spoon! (project demonstration)&lt;/a> by Leon Henrik Plickat showcases their new library for terminal UIs!&lt;/li>
&lt;li>&lt;a href="https://twitter.com/karlseguin/status/1530558941758795776">websocket.zig&lt;/a>, a websocket server passing all (important) autobahn tests has been released!&lt;/li>
&lt;li>&lt;a href="https://github.com/natecraddock/ziglua">ziglua&lt;/a> was released, which &amp;ldquo;takes advantage of Zig&amp;rsquo;s features to make it easier and safer to interact with the Lua API.&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="article-highlights">Article highlights&lt;/h2>
&lt;ul>
&lt;li>An excellent article on how to &lt;a href="https://zig.news/lupyuen/build-an-iot-app-with-zig-and-lorawan-5c3m">build an IoT App with Zig and LoRaWAN&lt;/a> was written by Lup Yuen Lee&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/viuiup/the_missing_bit_testing_zig_for_embedded/">&amp;ldquo;Testing Zig for embedded development&amp;rdquo;&lt;/a>, an excellent article contrasting Zig and Rust for embedded development.&lt;/li>
&lt;li>xq&amp;rsquo;s &lt;a href="https://zig.news/xq/cool-zig-patterns-305o">&amp;ldquo;Cool Zig Patterns&amp;rdquo; series&lt;/a> has continued, covering generics over array length, stable main loops, configuration parameters, and type identifiers.&lt;/li>
&lt;li>&lt;a href="https://zig.news/guidorice/zigs-var-and-const-for-javascript-devs-3899">&amp;ldquo;Zig&amp;rsquo;s var and const for JavaScript devs&amp;rdquo;&lt;/a> was published by Alex G Rice.&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/vll04j/an_intro_to_zigs_checkallallocationfailures/">&amp;ldquo;An Intro to Zig&amp;rsquo;s checkAllAllocationFailures&amp;rdquo;&lt;/a> detailing a strategy for testing OOM failures in Zig&lt;/li>
&lt;li>zig-gamedev &lt;a href="https://github.com/michal-z/zig-gamedev/wiki/Progress-Reports#may-2022">May 2022&lt;/a> and &lt;a href="https://github.com/michal-z/zig-gamedev/wiki/Progress-Reports#june-2022">June 2022&lt;/a> progress reports were released, featuring &lt;a href="https://www.reddit.com/r/Zig/comments/vc1q2g/crossplatform_physics_demosandbox/">a cross-platform physics demo/sandbox&lt;/a>, &lt;a href="https://www.reddit.com/r/Zig/comments/utunok/ziggamedev_new_crossplatform_sample_application/">a cross-platform PBR &amp;amp; IBL sample&lt;/a>, and new libraries for model loading, GUI, and audio - a great set of bindings for popular C libraries like imgui and mini-audio.&lt;/li>
&lt;li>Mach engine&amp;rsquo;s &lt;a href="https://github.com/hexops/mach/issues/355">v0.2 roadmap&lt;/a> was published, and we began planning &lt;a href="https://twitter.com/slimsag/status/1536189712821456897">the high-level application API&lt;/a>, ECS type safety, audio systems, WebAssebmly support &amp;amp; more.&lt;/li>
&lt;/ul>
&lt;h1 id="changes-to-zigmonthly">Changes to zigmonthly&lt;/h1>
&lt;p>As demands on my time and motivation shift over time, publishing zigmonthly on a regular cadence is.. challenging, to say the least.&lt;/p>
&lt;ul>
&lt;li>I work 40-60 hours a week &lt;a href="https://about.sourcegraph.com">at a 200+ person startup&lt;/a> directly reporting to the CTO, during tricky economic times.&lt;/li>
&lt;li>I do my best to get 40+ solid hours a week into a life-long passion project: the &lt;a href="https://machengine.org/">Mach game engine&lt;/a>.&lt;/li>
&lt;li>I take care of what could be described as a small cat shelter.&lt;/li>
&lt;/ul>
&lt;p>I believe something like Zigmonthly should exist. It should be more than just a link aggregator, it should be a community update crafted with care and love. Behind the scenes, this involves a &lt;em>lot&lt;/em> of work, and I haven&amp;rsquo;t always been true to that statement: (a) it&amp;rsquo;s not always clear when the best time to feature projects is, so I have to coordinate with project maintainers. Curating content and deciding if it&amp;rsquo;s representative of the quality we all want of Zig, and making the tough call of when to exclude something, while trying to acknowledge my biases - is all very time consuming and challenging.&lt;/p>
&lt;p>I do this work because nobody else is, and I want something like zigmonthly to exist for the community.&lt;/p>
&lt;p>To make my life easier, and to improve the quality of zigmonthly, I&amp;rsquo;m adopting a bi-monthly schedule. Hopefully this gives me more time to focus on &lt;a href="https://machengine.org">Mach engine&lt;/a>, more weekends where I can sit down and prepare these to publish on time, and give me a better selection of the highest quality content from the Zig community to go into these articles. The next one will go out &lt;em>sometime&lt;/em> in September and cover July-Aug.&lt;/p>
&lt;p>I&amp;rsquo;m also adopting a new format: orienting the articles more around &lt;em>new and highly-notable developments that should be highlighted&lt;/em>, rather than speaking so much about &lt;em>incremental developments to established projects&lt;/em> (excluding the Zig project itself.) I want these to be things that get people excited about what is going on in Zig, not a dump of links.&lt;/p>
&lt;p>The idea is that if you have a new project, if you wrote a new application in Zig, etc. and you&amp;rsquo;d like everyone to be aware of it - then you can use zigmonthly to &amp;lsquo;launch&amp;rsquo; it to 600+ readers and build your own audience/community from that. Updates to established projects (like say Mach or zig-gamedev) will still be mentioned, they&amp;rsquo;ll just be footnotes briefly summarizing (and linking to) their own status reports.&lt;/p>
&lt;h1 id="thanks-for-reading">Thanks for reading&lt;/h1>
&lt;p>If you like my work, you can be one of the 9 people needed to &lt;a href="https://github.com/sponsors/slimsag">help me reach my goal of 50 sponsors on GitHub&lt;/a> and I&amp;rsquo;ll forever appreciate you.&lt;/p></description></item><item><title>Zig monthly, April 2022: OS interop, Graphics, WebAssembly, Talks, Wren language &amp; more</title><link>https://zigmonthly.org/letters/2022/april/</link><pubDate>Thu, 12 May 2022 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2022/april/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/168130228-0b0e9736-97fa-44d2-a020-896bb4aa6105.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/168130228-0b0e9736-97fa-44d2-a020-896bb4aa6105.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="nanovg-zig">nanovg-zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/fabioarnold">@fabioarnold&lt;/a> has released nanovg-zig:&lt;/p>
&lt;blockquote>
&lt;p>A hardware-accelerated vector graphics library. I use this library to build the user interface of my (free) &lt;a href="https://fabioarnold.itch.io/mini-pixel">pixel art editor MiniPixel&lt;/a>. I&amp;rsquo;ve since rewritten it in Zig and ported it to Wasm/WebGL.&lt;/p>
&lt;p>You can use it to draw (blurred) text, arbitrary bezier curved shapes (with holes) and of course gradients. You can try the &lt;a href="https://fabioarnold.github.io/nanovg-zig/">WebAssembly example here&lt;/a> and find &lt;a href="https://github.com/fabioarnold/nanovg-zig">the source on GitHub here&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/167889348-9b8aa3aa-39f3-487f-914e-833995944146.mov" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/167889348-9b8aa3aa-39f3-487f-914e-833995944146.mov">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/168127948-d3f7ae2a-8425-4c1e-85ee-8415282331f4.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="wala-a-language-to-simplify-webassembly-text-syntax">wala: A language to simplify WebAssembly Text syntax&lt;/h1>
&lt;p>&lt;a href="https://github.com/CalmSystem/wala">wala&lt;/a> is a language trying to simplify WebAssembly Text syntax &amp;ldquo;while keeping the full expressiveness and retro-compatibility. Unwittingly becoming a Zig toolchain for WASM. - It aims to be for WASM what YAML is for JSON.&amp;rdquo;&lt;/p>
&lt;pre>&lt;code class="language-wala" data-lang="wala">func $fib export()
u64 $n -&amp;gt; ?
if {$n &amp;lt;= 2}
1
+
$fib{$n - 2}
$fib{$n - 1}
&lt;/code>&lt;/pre>&lt;p>&lt;a href="https://github.com/CalmSystem">@CalmSystem&lt;/a> cautions:&lt;/p>
&lt;blockquote>
&lt;p>This is my first zig project [&amp;hellip;] FizzBuzz and others are already working, but some work is still needed before the first proper release.&lt;/p>
&lt;/blockquote>
&lt;h1 id="tile-based-multithreaded-3d-software-renderer">Tile-based, multithreaded 3D software renderer&lt;/h1>
&lt;p>&lt;a href="https://github.com/danielabbott">@danielabbott&lt;/a> created &lt;a href="https://github.com/danielabbott/Software-Renderer">a simple software renderer in Zig&lt;/a>, a cool codebase to learn from if you&amp;rsquo;re into that sort of thing:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/167912515-e7c0c8ea-68df-4929-860f-e34c1063e0de.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/167912515-e7c0c8ea-68df-4929-860f-e34c1063e0de.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="simple-bin-packed-texture-atlas">Simple bin-packed texture atlas&lt;/h1>
&lt;p>&lt;a href="https://github.com/mitchellh">@mitchellh&lt;/a> dropped &lt;a href="https://gist.github.com/mitchellh/0c023dbd381c42e145b5da8d58b1487f">a gist&lt;/a> which provides a simple packed texture atlas in pure Zig, with no dependencies other than the stdlib.&lt;/p>
&lt;h1 id="zlog-zero-allocation-logging">zlog: Zero-Allocation Logging&lt;/h1>
&lt;p>Inspired by Go&amp;rsquo;s zerolog, &lt;a href="https://github.com/candrewlee14">@candrewlee14&lt;/a> has released &lt;a href="https://github.com/candrewlee14/zlog">zlog&lt;/a>, a zero-allocation logging library.&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/167915298-e1615354-f500-46c1-8e8f-fe5f2ec0c63b.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/167915298-e1615354-f500-46c1-8e8f-fe5f2ec0c63b.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="bindings-for-wren-a-small-fast-class-based-concurrent-scripting-language">Bindings for Wren (&amp;ldquo;a small, fast, class-based concurrent scripting language&amp;rdquo;)&lt;/h1>
&lt;p>&lt;a href="https://github.com/dantecatalfamo">@dantecatalfamo&lt;/a> released &lt;a href="https://github.com/dantecatalfamo/wren-zig">wren-zig&lt;/a> which provides Zig bindings to &lt;a href="https://wren.io">Wren&lt;/a>, a fast lua-sized scripting language with classes and concurrency.&lt;/p>
&lt;pre>&lt;code class="language-wren" data-lang="wren">System.print(&amp;quot;Hello, world!&amp;quot;)
class Wren {
flyTo(city) {
System.print(&amp;quot;Flying to %(city)&amp;quot;)
}
}
var adjectives = Fiber.new {
[&amp;quot;small&amp;quot;, &amp;quot;clean&amp;quot;, &amp;quot;fast&amp;quot;].each {|word| Fiber.yield(word) }
}
while (!adjectives.isDone) System.print(adjectives.call())
&lt;/code>&lt;/pre>&lt;p>(If you like that, you may also be interested in &lt;a href="https://github.com/giann/buzz">Buzz&lt;/a>, &amp;ldquo;a small/lightweight typed scripting language written in Zig&amp;rdquo;, from last month&amp;rsquo;s article.)&lt;/p>
&lt;h1 id="snowflake-simulator">snowflake simulator&lt;/h1>
&lt;p>&lt;img src="https://github.com/Rekihyt" alt="@Rekihyt"> has built a &lt;a href="https://github.com/Rekihyt/snow">simple snowflake simulator&lt;/a> using OpenGL:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/167920253-999344b2-3fdc-46d0-8525-cdb2f2be53e8.gif">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/167920253-999344b2-3fdc-46d0-8525-cdb2f2be53e8.gif">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zig-arg-cli-flags-subcommands--nested-subcommands">zig-arg: CLI flags, subcommands &amp;amp; nested subcommands&lt;/h1>
&lt;p>&lt;a href="https://github.com/PrajwalCH/zig-arg">zig-arg&lt;/a> is a &lt;a href="https://github.com/clap-rs/clap">clap-rs&lt;/a> inspired Command Line Argument parser for Zig which support flags, subcommand and nested subcommands out of the box.&lt;/p>
&lt;p>It looks quite slick, check out the &lt;a href="https://www.reddit.com/r/Zig/comments/u4bjrq/github_prajwalchzigarg_arg_parser_library_for_zig/">Reddit discussion&lt;/a> for some alternatives as well.&lt;/p>
&lt;h1 id="zig-milan-party-2023-talks">Zig MiLAN Party 2023 talks&lt;/h1>
&lt;p>The first-ever European Zig meetup was held in Milan, Italy - the Zig MiLAN Party! Here were some of the talks presented/recorded:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/u4z46t/zig_milan_party_2023_zig_roadmap_2023_andrew/">â¡ Zig Roadmap 2023 - Andrew Kelley&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=bJNSPZTLMUU">iOS DX With Zig - Jakub Konka&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=m3gOX26LOeM">Mach game engine, what&amp;rsquo;s next (2022) - Stephen Gutekanst&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="windows-explorer-integration-in-zig">Windows explorer integration in Zig&lt;/h1>
&lt;p>Ever wondered how applications on Windows integrate with the right-click menu, and overlay their own pixels on files in the explorer? &lt;a href="https://github.com/squeek502">@squeek502&lt;/a>&amp;rsquo;s new &lt;a href="https://github.com/squeek502/watchedoverlay">watchedoverlay&lt;/a> project does just that, giving you the ability to right-click -&amp;gt; &amp;ldquo;Toggle watched&amp;rdquo; which renders a &amp;ldquo;Watched&amp;rdquo; green checkmark over files:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/167921403-a1347523-d419-48fd-9fff-d490c527fef1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/167921403-a1347523-d419-48fd-9fff-d490c527fef1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="jakub-konkas-work-on-ios-developer-experience">Jakub Konka&amp;rsquo;s work on iOS developer experience&lt;/h1>
&lt;p>I&amp;rsquo;m ecstatic this work is ongoing, so I had to include this! This work isn&amp;rsquo;t complete or very usable currently, as Jakub cautions below, but here are three repositories you may want to keep an eye on if you&amp;rsquo;re interested in the future Zig developer experience for iOS app development:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubkon/ZigKit">https://github.com/kubkon/ZigKit&lt;/a> &amp;lsquo;will hopefully become a goto lib for low-level Apple frameworks bindings in Zig&amp;rsquo;&lt;/li>
&lt;li>&lt;a href="https://github.com/kubkon/zignature">https://github.com/kubkon/zignature&lt;/a> &amp;lsquo;the goto solution for codesigning your Apple apps with Zig (hopefully without even requiring access to frameworks, but time will tell if that is even possible)&amp;rsquo;&lt;/li>
&lt;li>&lt;a href="https://github.com/kubkon/zig-deploy">https://github.com/kubkon/zig-deploy&lt;/a> &amp;lsquo;the final piece of the puzzle [&amp;hellip;] it uses ZigKit internally for low-level Apple bindings, including the undocumented and private framework MobileDevice which is used by Xcode (and oss tool ios-deploy) to speak to an Apple device such as an iPhone.&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Early days, and I strongly advise against using zig-deploy - wouldn&amp;rsquo;t want anyone to brick their phone! Having said that, any questions about any of this, you know where to find me!&lt;/p>
&lt;/blockquote>
&lt;h1 id="fast-polygon-tesselator">fast polygon tesselator&lt;/h1>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/167927619-b6e67976-7cf5-4ea7-87ca-65ddefcd9418.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/167927619-b6e67976-7cf5-4ea7-87ca-65ddefcd9418.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/168122810-90dbeff6-6e41-41c1-b6da-df62d994f699.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;blockquote>
&lt;p>I wrote a fast polygon tessellator (triangulates in one pass) in pure zig which can be used for vector graphics.&lt;/p>
&lt;p>It&amp;rsquo;s able to handle complex cases and can draw the tiger head svg. This video shows what it&amp;rsquo;s doing to fill a whisker of the tiger. The &lt;a href="https://github.com/fubark/cosmic/blob/master/tools/visual-tess.js">demo app is here&lt;/a> and the &lt;a href="https://github.com/fubark/cosmic/blob/master/graphics/src/tessellator.zig">zig implementation is here&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>Be sure to check out the &lt;a href="https://www.reddit.com/r/Zig/comments/u8bhto/polygon_tessellator_in_zig/">discussion on Reddit&lt;/a>, too, which goes into further detail about how it works:&lt;/p>
&lt;blockquote>
&lt;p>The vertices are chosen from a vertex queue similar to the y-monotone triangulation so most of the algorithm is making sure that each sub-polygon span is a y-monotone. And determining which regions to fill triangles depends on the winding rule. Currently, this tessellator does the evenodd fill rule but it shouldn&amp;rsquo;t be too hard to add the nonzero fill rule. :)&lt;/p>
&lt;/blockquote>
&lt;h1 id="the-zig-compiler-can-finally-build-itself">The Zig compiler can finally build itself&lt;/h1>
&lt;p>In case you missed it, the Zig self-hosted compiler has had a great deal of progress and &lt;a href="https://news.ycombinator.com/item?id=31052029">can finally build itself&lt;/a>.&lt;/p>
&lt;p>This is a huge milestone for Zig, and while &lt;a href="https://github.com/ziglang/zig/issues/89">there&amp;rsquo;s still much work to do&lt;/a> before the new compiler can be shipped to everyone - it&amp;rsquo;s looking like we&amp;rsquo;ll be able to have Zig-implemented-in-Zig (rather than C++) very soon which should lead to an explosion of improvements and new contributors.&lt;/p>
&lt;p>Exciting times!&lt;/p>
&lt;h1 id="mach-engine-updates">Mach engine updates&lt;/h1>
&lt;p>With Mach we&amp;rsquo;ve seen quite a burst of contributors! Thanks to @johanfforsberg, @d3m1gd, @zargio, @andoryuuta and more we&amp;rsquo;ve now got &lt;a href="https://machengine.org/gpu/">a great WebGPU example showcase&lt;/a> showing off low-level graphics and a great starting point for anyone interested in learning WebGPU with Zig:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/167927458-819a6c65-42c5-497a-8b97-8f0ec7021560.mov" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/167927458-819a6c65-42c5-497a-8b97-8f0ec7021560.mov">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/168124468-ee9ade92-75eb-48ed-ab54-4b9890e4f9eb.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>There&amp;rsquo;s also major work underway by &lt;a href="https://github.com/iddev5">@iddev5&lt;/a> to add Browser WebAssembly support-making Mach even more cross-platform, as well as &lt;a href="https://github.com/PiergiorgioZagaria">@PiergiorgioZagaria&lt;/a>&amp;rsquo;s work to create a ShaderToy-esque application called &lt;a href="https://github.com/hexops/mach/tree/main/shaderexp">&lt;code>shaderexp&lt;/code>&lt;/a> which live-reloads WGSL shaders as you save in your editor.&lt;/p>
&lt;h1 id="gltf-20-in-pure-zig">glTF 2.0 in pure Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/kooparse">@kooparse&lt;/a> has been working on &lt;a href="https://github.com/kooparse/gltf">a pure Zig parser for glTF 2.0&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Loading 3D models fully in Zig, without any parser/loader in other languages would be great, so I made a glTF 2.0 parser. I&amp;rsquo;m using it on my engine, and it works well enough for others' project usage (I guess). There are also some helpers to get local and global positions of each node and something to load data from binary. &amp;lsquo;Hope it could help some! ð&lt;/p>
&lt;/blockquote>
&lt;h1 id="zig-gamedev-updates">zig-gamedev updates&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/168126644-1e60f480-3597-4278-82d4-964fd3d6bd78.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/168126644-1e60f480-3597-4278-82d4-964fd3d6bd78.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/michal-z">@michal-z&lt;/a> is at it again, this time leveraging &lt;a href="https://machengine.org/gpu">mach/gpu&lt;/a> to bring his work to Windows/Linux/macOS:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/triangle_wgpu">triangle_wgpu&lt;/a> is a simple but fairly complete app showing the ins-and-outs of WebGPU, creating bind group layouts, render peipelines, managing vertex/index/uniform buffers, depth buffers, etc.&lt;/li>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/procedural_mesh_wgpu">procedural_mesh_wgpu&lt;/a> leverages his zmesh library to efficiently draw several procedurally generated meshes, use simple physically-based shading, camera movement, and more.&lt;/li>
&lt;li>Speaking of &lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/libs/zmesh">&lt;code>zmesh&lt;/code>&lt;/a>, v0.2 is out. It&amp;rsquo;s a small library/bindings for loading, generating, processing and optimizing triangle meshes - using par_shapes, meshoptimizer, and cgltf behind the scenes.&lt;/li>
&lt;/ul>
&lt;h1 id="brucelib-updates">brucelib updates&lt;/h1>
&lt;p>You might also want to keep an eye on &lt;a href="https://github.com/hazeycode">@hazeycode&lt;/a>&amp;rsquo;s &lt;a href="https://github.com/hazeycode/brucelib">brucelib&lt;/a> - although early stages, work continues and it&amp;rsquo;s recently gained &lt;a href="https://github.com/hazeycode/brucelib/blob/main/modules/audio/README.md">an audio module&lt;/a> which provides a basic mixer and wav file loader!&lt;/p>
&lt;h1 id="thanks-for-reading">Thanks for reading!&lt;/h1>
&lt;p>If you like my work on zigmonthly, &lt;a href="https://devlog.hexops.com/categories/mach">Mach engine&lt;/a>, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, March 2022: io_uring, physics, chess, gamedev &amp; scripting languages</title><link>https://zigmonthly.org/letters/2022/march/</link><pubDate>Fri, 01 Apr 2022 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2022/march/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/162355131-07d263f8-bb28-4946-adca-ad1444532eca.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162355131-07d263f8-bb28-4946-adca-ad1444532eca.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="asynciouring">AsyncIOUring&lt;/h1>
&lt;p>&lt;a href="https://github.com/saltzm">@saltzm&lt;/a> released &lt;a href="https://github.com/saltzm/async_io_uring">AsyncIOUring&lt;/a> - an event loop that wraps the &lt;code>IO_Uring&lt;/code> library with coroutines support.&lt;/p>
&lt;p>For context: &lt;code>io_uring&lt;/code> is a new-ish Linux kernel feature which allows for &lt;strong>much more efficient network/file IO&lt;/strong>. Zig has an &lt;code>IO_Uring&lt;/code> library that is a convenient interface to the Linux API.&lt;/p>
&lt;p>Where &lt;code>AsyncIOUring&lt;/code> comes in (and why this is so cool): it&amp;rsquo;s an &lt;em>even more convenient interface&lt;/em> to this API, adding an async event loop that handles submission and completion via the kernel APIs. It leverages Zig&amp;rsquo;s async functionality to suspend execution, letting you write serial/blocking code naturally while behind the scenes it actually leverages IO concurrency (even within a single thread!)&lt;/p>
&lt;h1 id="phyz-2d-physics">phyz 2D physics&lt;/h1>
&lt;p>&lt;a href="https://github.com/silversquirl">@silversquirl&lt;/a> is working on &lt;a href="https://github.com/silversquirl/phyz">phyz&lt;/a>, a work-in-progress physics engine for 2D games&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/162350926-164fef0f-e70b-466d-a15a-ab8e855aaa1e.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/162350926-164fef0f-e70b-466d-a15a-ab8e855aaa1e.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162351061-114cadaf-9cab-44bf-9d43-19aa9bfd9112.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="regz-atdf-file-parsing-for-microcontrollers">regz: ATDF file parsing for microcontrollers&lt;/h1>
&lt;p>&lt;a href="https://github.com/mattnite">@mattnite&lt;/a> as part of the Zig embedded group has added ATDF file parsing (used for AVR microcontrollers) to &lt;a href="https://github.com/ZigEmbeddedGroup/regz">regz&lt;/a> (a Zig code generator for microcontrollers)&lt;/p>
&lt;h1 id="zba-gameboy-advance-emulator-updates">ZBA (Gameboy advance emulator) updates&lt;/h1>
&lt;p>Rekai is continuing to work on &lt;a href="https://git.musuka.dev/paoda/zba">ZBA, a gameboy advance emulator&lt;/a>, recently implementing normal sprites and squashing enough bugs that some titles like Kirby: Nightmare in Dream Land are playable!&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/162351220-710f2b29-1b76-4a64-a5e1-92d3f75584c5.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162351220-710f2b29-1b76-4a64-a5e1-92d3f75584c5.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="avalanche---uci-chess-engine-using-neural-networks">Avalanche - UCI Chess Engine using Neural Networks&lt;/h1>
&lt;p>&lt;a href="https://github.com/SnowballSH">@SnowballSH&lt;/a> has released &lt;a href="https://github.com/SnowballSH/Avalanche">Avalanche&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>(Probably the first) UCI Chess Engine written in Zig :D It uses Neural Networks too.&lt;/p>
&lt;p>It is written 99% in Zig, utilizing a lot of Zig&amp;rsquo;s awesome features such as packed structs.&lt;/p>
&lt;p>It plays at around 2300 ELO (a.k.a. &lt;strong>can beat most human professional players&lt;/strong>) now :) You can view its games against other engines here &lt;a href="https://lichess.org/@/IceBurnEngine/all">https://lichess.org/@/IceBurnEngine/all&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="zig-gamedev">zig-gamedev&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/162349985-d6056fe4-76bb-46cf-97e1-c38b761515ce.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162349985-d6056fe4-76bb-46cf-97e1-c38b761515ce.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://twitter.com/MichalZiulek">@MichalZiulek&lt;/a> is back with many more updates to zig-gamedev!&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/libs/zbullet">&lt;code>zbullet&lt;/code>&lt;/a> v0.1, bindings for the Bullet Physics SDK complete with 6 &lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/intro#intro-6">intro applications&lt;/a>!&lt;/li>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/libs/znoise">&lt;code>znoise&lt;/code>&lt;/a> - bindings for FastNoiseLite&lt;/li>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/libs/zmesh">&lt;code>zmesh&lt;/code>&lt;/a> - bindings for &lt;code>par_shapes.h&lt;/code> complete with a &lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/procedural_mesh">demo&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/libs/zmath">&lt;code>zmath&lt;/code>&lt;/a> v0.3 - SIMD math library for game developers, now with Fast Fourier Transforms, color management functions, and better docs&lt;/li>
&lt;/ul>
&lt;h1 id="mini-pixel-v02">Mini Pixel v0.2&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/captainhorst">@captainhorst&lt;/a> has &lt;a href="https://twitter.com/captainhorst/status/1503468961094066176">released Mini Pixel v0.2&lt;/a>, a pixel image editor which you can get &lt;a href="https://fabioarnold.itch.io/mini-pixel">for free on Itch.io&lt;/a>&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/162352146-5a0b5f8e-5d93-4441-9d2c-8d86d3c86321.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/162352146-5a0b5f8e-5d93-4441-9d2c-8d86d3c86321.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162352265-a078adb5-466d-4d5e-a2b7-549046ebe603.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="marble---an-experimental-metamorphic-testing-library">Marble - an experimental metamorphic testing library&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/162352504-947c419e-5ee9-4a99-85a1-769cc961de51.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162352504-947c419e-5ee9-4a99-85a1-769cc961de51.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/cryptocode">@cryptocode&lt;/a> released Marble, a metamorphic testing library:&lt;/p>
&lt;blockquote>
&lt;p>Metamorphic testing is a powerful technique that provides additional test coverage by applying a number of transformations to test input, and then checking if certain relations still hold between the outputs. Marble will automatically run through all possible combinations of these transformations.&lt;/p>
&lt;/blockquote>
&lt;h1 id="mach-engine-v01---cross-platform-zig-graphics-in-60-seconds">Mach engine v0.1 - cross platform Zig graphics in 60 seconds&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/160258304-3335a609-6177-4c1a-9008-d9525bd72c85.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/160258304-3335a609-6177-4c1a-9008-d9525bd72c85.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>I released &lt;a href="https://devlog.hexops.com/2022/mach-v0.1-zig-graphics-in-60s">Mach engine v0.1&lt;/a> after some ~9 months of work and 1,100+ commits, giving you cross-platform graphics in 60s:&lt;/p>
&lt;pre>&lt;code>git clone https://github.com/hexops/mach
cd mach/
zig build run-example
&lt;/code>&lt;/pre>&lt;h1 id="buzz---smalllightweight-typed-scripting-language">Buzz - small/lightweight typed scripting language&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/162352945-d93c1675-f937-4a08-a2f4-a6c22b56470c.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/162352945-d93c1675-f937-4a08-a2f4-a6c22b56470c.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/giann">@giann&lt;/a> is creating &lt;a href="https://github.com/giann/buzz">Buzz&lt;/a>, a small/lightweight typed scripting language written in Zig:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Small in size and complexity (just a bit more than Lua though)&lt;/li>
&lt;li>Strict typing&lt;/li>
&lt;li>Unambiguous&lt;/li>
&lt;li>No nonsense coercion&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="thanks-for-reading">Thanks for reading!&lt;/h1>
&lt;p>If you like my work on zigmonthly, &lt;a href="https://devlog.hexops.com/categories/mach">Mach engine&lt;/a>, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, February 2022: Language interoperability keeps getting better</title><link>https://zigmonthly.org/letters/2022/february/</link><pubDate>Tue, 01 Mar 2022 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2022/february/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158046724-d423ec00-db66-4346-be54-257a59082b52.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/158046724-d423ec00-db66-4346-be54-257a59082b52.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="haskell--zig">Haskell â Zig&lt;/h1>
&lt;p>&lt;a href="https://luctielen.com/posts/calling_zig_from_haskell/">Calling Zig from Haskell&lt;/a> by &lt;a href="https://twitter.com/luctielen">@luctielen&lt;/a> covers how to leverage Zig from Haskell.&lt;/p>
&lt;h1 id="nodejs--zig">NodeJS â Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/pluvial/node-zig/tree/main/packages/cli">&lt;code>@ziglang/cli&lt;/code>&lt;/a> is a new NPM package by &lt;a href="https://github.com/pluvial">@pluvial&lt;/a> which makes it easy to integrate Zig into a NodeJS project.&lt;/p>
&lt;p>They&amp;rsquo;re also using it in conjunction with their other project, &lt;a href="https://github.com/pluvial/vite-plugin-zig">vite-plugin-zig&lt;/a> to do things like &lt;a href="https://pluvial.xyz/wasm">WebAssembly math addition&lt;/a>. Pretty cool!&lt;/p>
&lt;h1 id="rust--zig">Rust â Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/messense/cargo-zigbuild">cargo-zigbuild&lt;/a> has just been released by &lt;a href="https://github.com/messense">@messense&lt;/a>, allowing one to compile a Rust Cargo project with Zig as linker for &lt;a href="https://actually.fyi/posts/zig-makes-rust-cross-compilation-just-work/">easier cross compilation&lt;/a>!&lt;/p>
&lt;h1 id="mruby--zig">mruby â Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/dantecatalfamo/mruby-zig">mruby-zig&lt;/a> by &lt;a href="https://github.com/dantecatalfamo">@dantecatalfamo&lt;/a> lets you leverage the embeddable Ruby implementation fully from Zig applications!&lt;/p>
&lt;h1 id="huffman-coding-visualization">Huffman coding visualization&lt;/h1>
&lt;p>&lt;a href="https://github.com/190n">190n&lt;/a> created a &lt;a href="https://190n.github.io/huffman-visualization/">visualization of the Huffman coding algorithm&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158044546-01dc8086-076d-4daa-9207-f06e3780de34.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/158044546-01dc8086-076d-4daa-9207-f06e3780de34.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="using-zig-comptime-for-conceptual-dryness-forth">Using Zig comptime for conceptual dryness (Forth)&lt;/h1>
&lt;p>&lt;a href="https://www.lucabol.com">@lucabol&lt;/a> shared an interesting article on &lt;a href="https://www.lucabol.com/posts/2022-03-09-using-zig-comptime-for-conceptual-dryness/">Using Zig comptime for conceptual dryness&lt;/a> - describing an implementation of the Forth language in Zig.&lt;/p>
&lt;h1 id="telegram--zig">Telegram â Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/axgdev">@axgdev&lt;/a> wrote a &lt;a href="https://github.com/axgdev/telegram_echobot_zig">telegram echo bot&lt;/a> in Zig, pretty cool and shows usage of the &lt;code>requestz&lt;/code> HTTP library. They also &lt;a href="https://www.twitch.tv/videos/1298657556">streamed development of it on Twitch&lt;/a> and more recently even released a &lt;a href="https://github.com/axgdev/telezig">Telegram library for Zig&lt;/a>.&lt;/p>
&lt;h1 id="gameboy-advance-emulator">Gameboy Advance Emulator&lt;/h1>
&lt;p>Rekai has been working on &lt;a href="https://git.musuka.dev/paoda/zba">ZBA, a gameboy advance emulator&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;ve been working on a Gameboy Advance Emulator! With an initial (quite broken) implementation of Mode 0 Graphics I finally have something visual to show off. It&amp;rsquo;s still very early so the CPU is the only thing that really passes the gauntlet of test ROMs out there.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158044744-f8c33a08-4cf1-4b45-bccc-7a793f209a8b.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/158044744-f8c33a08-4cf1-4b45-bccc-7a793f209a8b.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="simple-linking-format">Simple Linking Format&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32">@MasterQ32&lt;/a> released a small project for learn the basics of linking, &lt;a href="https://github.com/MasterQ32/SLF">SLF&lt;/a>, &amp;ldquo;a very simple object file format that can be used to link programs that don&amp;rsquo;t require distinct sections for code and data.&amp;rdquo;&lt;/p>
&lt;h1 id="in-depth-articles-about-the-stage2-zig-compiler-internals">In-depth articles about the stage2 Zig compiler internals&lt;/h1>
&lt;p>Mitchell Hashimoto has been publishing &lt;a href="https://mitchellh.com/zig">a series of in-depth articles&lt;/a> about the internals of the stage2 Zig compiler, including:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://mitchellh.com/zig/tokenizer">Zig Tokenizer&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mitchellh.com/zig/parser">Zig Parser&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mitchellh.com/zig/astgen">Zig AstGen: AST =&amp;gt; ZIR&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mitchellh.com/zig/sema">Zig Sema: ZIR =&amp;gt; AIR&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://mitchellh.com/zig/build-internals">Zig Build System Internals&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Also relevant, I highly suggest checking out &lt;a href="https://zig.news/gowind">Govind&amp;rsquo;s&lt;/a> 2-part series &lt;a href="https://zig.news/gowind/so-where-is-my-stuff-stored-part-1-38b7">&amp;ldquo;So where is my stuff stored ?&amp;quot;&lt;/a> which dives into some of the lower-level details when investigating how Zig creates structs on the stack.&lt;/p>
&lt;h1 id="brucelib">Brucelib&lt;/h1>
&lt;p>Although early stages and very much a work-in-progress, &lt;a href="https://github.com/hazeycode">@hazeycode&lt;/a> announced they are working on &lt;a href="https://github.com/hazeycode/brucelib">Brucelib&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A monorepo of modules for programming cross-platform games, simulations, engines and editors. Leveraging the Zig programming language and toolchain, brucelib intends to be highly hackable and suitable for rapid prototyping, jams or fully-fledged products. Each module is designed to be easy to configure, extend or modify to your own specific needs, and to replace with something else in future if your project demands it.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158044639-d7815e33-fbd5-463f-a470-e4965381ee14.gif">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/158044639-d7815e33-fbd5-463f-a470-e4965381ee14.gif">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="cosmic">Cosmic&lt;/h1>
&lt;p>&lt;a href="https://github.com/fubark">@fubark&lt;/a> is working on &lt;a href="https://www.cosmic-js.com/">Cosmic&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Cosmic is a general purpose runtime for Javascript and WASM. It aims to have broad applications by exposing native cross platform APIs: window management, 2D/3D graphics, UI widgets, filesystem, networking, and more. It also aims to streamline software tooling to provide the essentials to help you develop and maintain software.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158045196-4836fb58-1039-4e66-b64e-19242bfa46f1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/158045196-4836fb58-1039-4e66-b64e-19242bfa46f1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="regz-zig-code-generator-for-microcontrollers">regz: Zig code generator for microcontrollers&lt;/h1>
&lt;p>&lt;a href="https://github.com/mattnite">@mattnite&lt;/a> and the Zig embedded group published &lt;a href="https://github.com/ZigEmbeddedGroup/regz">regz&lt;/a>, a Zig code generator for microcontrollers produced from SVD files.&lt;/p>
&lt;h1 id="zig-kills-it-in-the-wasm4-game-jam">Zig kills it in the WASM4 game jam&lt;/h1>
&lt;p>Zig games were quite prominant in the WASM4 game jam, there&amp;rsquo;s a great &lt;a href="https://forum.ziggit.dev/t/awesome-tiny-games-in-11-programming-languages-wasm-4-jam-2022-results/63">overview video on the new Zig forum&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://gitlab.com/freiguy1">@freiguy1&lt;/a> for example did a Zig implementation of the original Snake game which you can play here: &lt;a href="https://freiguy1.itch.io/znake">https://freiguy1.itch.io/znake&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158045251-e959db9e-dd8d-4af4-b4af-c9667cad3e75.png">&lt;img height="340px" src="https://user-images.githubusercontent.com/3173176/158045251-e959db9e-dd8d-4af4-b4af-c9667cad3e75.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="package-indexes">Package indexes&lt;/h1>
&lt;p>Now seems like a good time to re-highlight &lt;a href="https://aquila.red/">Aquila&lt;/a> by &lt;a href="https://github.com/nektro">@nektro&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>A federated package index and CI system for the Zig programming language built around the Zigmod package manager.&lt;/p>
&lt;/blockquote>
&lt;p>Aquila recently got support for &lt;a href="https://aquila.red/stats">statistics&lt;/a> and README rendering.&lt;/p>
&lt;p>As well you should check out &lt;a href="https://zig.pm/">zig.pm&lt;/a>, the Zig package aggregator by &lt;a href="https://github.com/MasterQ32">@MasterQ32&lt;/a> which you can &lt;a href="https://zig.news/xq/zig-package-aggregator-58co">read about here&lt;/a>.&lt;/p>
&lt;h1 id="s2s-struct-to-stream--stream-to-struct">s2s: struct to stream | stream to struct&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32">@MasterQ32&lt;/a> released an excellent binary serialization library, &lt;a href="https://github.com/ziglibs/s2s">ziglibs/s2s&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Convert (nearly) any Zig runtime datatype to binary data and back.&lt;/li>
&lt;li>Computes a stream signature that prevents deserialization of invalid data.&lt;/li>
&lt;li>No support for graph like structures. Everything is considered to be tree data.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/158045305-8ab0f991-51fc-4101-ba7e-15ddf9ec69bb.png">&lt;img height="340px" src="https://user-images.githubusercontent.com/3173176/158045305-8ab0f991-51fc-4101-ba7e-15ddf9ec69bb.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="mustache-logic-less-template-rendering">Mustache logic-less template rendering&lt;/h1>
&lt;p>&lt;a href="https://github.com/batiati">@batiati&lt;/a> is implementing logic-less &lt;a href="https://github.com/batiati/mustache-zig">Mustache template rendering&lt;/a> so your Zig code can render template strings like &lt;code>Hello {{name}} from Zig&lt;/code>.&lt;/p>
&lt;h1 id="2-day-meetup-in-milan-italy-apr-9-10">2-day meetup in Milan, Italy. Apr 9-10&lt;/h1>
&lt;p>The first ever European Zig meetup is happening Apr 9-10 in Milan, Italy! If you&amp;rsquo;d like to attend, there&amp;rsquo;s plenty of room - &lt;a href="https://zig.news/kristoff/zig-milan-party-2022-final-info-schedule-1jc1">you can find more information here&lt;/a>&lt;/p>
&lt;h1 id="thanks-for-reading">Thanks for reading!&lt;/h1>
&lt;p>If you like my work on zigmonthly, &lt;a href="https://devlog.hexops.com/categories/mach">Mach engine&lt;/a>, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, January 2022: Lua bindings, stage2 work, gamedev, and tons of new libraries</title><link>https://zigmonthly.org/letters/2022/january/</link><pubDate>Tue, 01 Feb 2022 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2022/january/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/153108292-db1f0981-af4d-4537-8032-f18e51a58d1e.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/153108292-db1f0981-af4d-4537-8032-f18e51a58d1e.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zoltan-a-minimalist-lua-binding">zoltan: a minimalist Lua binding&lt;/h1>
&lt;p>This month&amp;rsquo;s showcase mention is &lt;a href="https://github.com/ranciere">@ranciere&lt;/a>&amp;rsquo;s &lt;a href="https://github.com/ranciere/zoltan">zoltan project&lt;/a>, a minimalist Lua binding. Use cases:&lt;/p>
&lt;ul>
&lt;li>Dynamic configuration of the application (you can handle complex configuration cases which involve logic)&lt;/li>
&lt;li>To support user-defined extensions&lt;/li>
&lt;li>To automate repetitive user tasks (Neovim)&lt;/li>
&lt;li>To develop UI business logic (a lot of games do this)&lt;/li>
&lt;/ul>
&lt;p>What struck me &lt;a href="https://zig.news/ranciere/zoltan-a-minimalist-lua-binding-4mp4">about their blog post&lt;/a> was the simplicity of the API:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/153103890-323d0dd6-dd45-4f97-8569-f4567a564b1f.png">&lt;img width="400px" src="https://user-images.githubusercontent.com/3173176/153103890-323d0dd6-dd45-4f97-8569-f4567a564b1f.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/153104227-de406a69-1218-4059-931e-20fb12828fb5.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/153104227-de406a69-1218-4059-931e-20fb12828fb5.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="buztd-super-lightweight-process-killer">buztd: Super lightweight process killer&lt;/h1>
&lt;p>&lt;a href="https://github.com/vrmiguel">@vrmiguel&lt;/a> released &lt;a href="https://github.com/vrmiguel/buztd">buztd&lt;/a>, a super lightweight process killer for Linux.&lt;/p>
&lt;h1 id="zt-imguiopenglstb_imageglfw">ZT: ImGui+OpenGL+stb_image+GLFW&lt;/h1>
&lt;p>Runner up for this month&amp;rsquo;s showcase mention, &lt;a href="https://github.com/JonSnowbd">@JonSnowbd&lt;/a>&amp;rsquo;s project called &lt;a href="https://github.com/JonSnowbd/ZT">ZT&lt;/a>, &amp;ldquo;A zig-contained library for Windows and Ubuntu that automatically compiles and links ImGui, OpenGL, stb_image, and GLFW into typed packages.&amp;rdquo; which has been in development for over 9 months:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/153103202-c428b674-c16c-46b4-9ca6-25a661079b0b.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/153103202-c428b674-c16c-46b4-9ca6-25a661079b0b.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="minz-minimal-string-compression">minz: Minimal string compression&lt;/h1>
&lt;p>&lt;a href="https://github.com/judofyr">@judofyr&lt;/a> released &lt;a href="https://github.com/judofyr/minz">minz&lt;/a>, a minimal string compressor based on the paper &lt;a href="http://www.vldb.org/pvldb/vol13/p2649-boncz.pdf">FSST: Fast Random Access String Compression.&lt;/a>&lt;/p>
&lt;p>Highly suggest checking out &lt;a href="https://www.reddit.com/r/Zig/comments/sa1pnf/minz_minimal_string_compression/">the Reddit discussion&lt;/a> if this interests you.&lt;/p>
&lt;h1 id="zig-compiling-and-running-a-program-faster-than-python-can-interpret-it">Zig compiling and running a program faster than Python can interpret it&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/andy_kelley/status/1483677253682675713">Andrew Kelley shared&lt;/a> how the upcoming stage2 Zig compiler can compile an executable from scratch and run it faster than Python can interpret the file on the right:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/153105034-68134cdc-f206-42ad-91c4-1e7cfcdf887a.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/153105034-68134cdc-f206-42ad-91c4-1e7cfcdf887a.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>We&amp;rsquo;re also starting to get the first hints of how Zig&amp;rsquo;s &lt;a href="https://github.com/ziglang/zig/issues/68">hot code swapping&lt;/a> feature will work, with the first successful hot code swap &lt;a href="https://www.reddit.com/r/Zig/comments/s9toy1/we_have_a_working_hot_code_swapping/">shown on one of Andrew&amp;rsquo;s recent Twitch streams&lt;/a>!&lt;/p>
&lt;h1 id="implementing-the-self-programming-language-in-zig">Implementing the &amp;ldquo;Self&amp;rdquo; programming language in Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/sin-ack">@sin-ack&lt;/a> shared &lt;a href="https://discord.com/channels/605571803288698900/605572611539206171/939317499139330111">on Discord&lt;/a> how they&amp;rsquo;re working on an implementation of the Self programming language:&lt;/p>
&lt;blockquote>
&lt;p>For about the past 2 months or so, I have been working on an implementation of the Self programming language (&lt;a href="https://selflanguage.org/">https://selflanguage.org/&lt;/a>) in Zig. It&amp;rsquo;s been coming along pretty well so far; the language parser, AST, interpreter and VM runtime is now done. For the past couple of weeks I have been working on getting garbage collection (generational scavenging GC) right and for the past couple of days I&amp;rsquo;ve been doing performance work. Feel free to ask me anything :^)&lt;/p>
&lt;p>The project is available at: &lt;a href="https://github.com/sin-ack/zigself">https://github.com/sin-ack/zigself&lt;/a>&lt;/p>
&lt;p>I&amp;rsquo;ve been recording some of the things I&amp;rsquo;ve worked on and uploading them here: &lt;a href="https://www.youtube.com/channel/UC7XQtFrGLTuJpIMTg3oiZ5Q/videos">https://www.youtube.com/channel/UC7XQtFrGLTuJpIMTg3oiZ5Q/videos&lt;/a> (just published a second video, actually :^)&lt;/p>
&lt;/blockquote>
&lt;h1 id="visualizing-how-rasterization-works-on-modern-gpus">Visualizing how rasterization works on modern GPUs&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/MichalZiulek">@MichalZiulek&lt;/a> is back again with more incredible DirectX graphics demos, &lt;a href="https://www.reddit.com/r/gamedev/comments/sest9c/see_how_gpu_rasterizer_works_in_slow_motion_gtx/">this time showing&lt;/a> how GPU reasterization of triangles works in slow motion (&amp;ldquo;This works by capturing render output to a transient buffer and then playing it back at human-discernable speed.&amp;quot;):&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/153105961-29ee6e52-656f-41cf-bf33-1cc871c6bbce.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/153105961-29ee6e52-656f-41cf-bf33-1cc871c6bbce.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/153106005-21568eb5-6610-442f-a908-17fb1ae10068.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/rasterization">Check it out on GitHub&lt;/a> and &lt;a href="https://github.com/sponsors/michal-z">consider sponsoring Michal&amp;rsquo;s work&lt;/a>!&lt;/p>
&lt;h1 id="zmath--introduction-to-zig-gamedev-directx-applications">zmath &amp;amp; introduction to zig-gamedev DirectX applications&lt;/h1>
&lt;p>The other two notable mentions from Michal are:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/blob/main/libs/common/zmath.zig">zmath 0.2&lt;/a>: fast, multi-platform, SIMD math library (&amp;ldquo;This release brings matrix operations, quaternion operations and much improved API. I wrote short &lt;a href="https://zig.news/michalz/fast-multi-platform-simd-math-library-in-zig-2adn">article about it here&lt;/a>&amp;quot;)&lt;/li>
&lt;li>&lt;a href="https://github.com/michal-z/zig-gamedev/tree/main/samples/intro">6 zig-gamedev samples / intro applications&lt;/a>, &amp;ldquo;Learn low-level graphics programming, game programming and zig-gamedev framework. Intro applications have been designed for learning purposes, I try to keep code as simple as possible and comment new functionality added in each subsequent program.&amp;rdquo; - some very cool screenshots in here!&lt;/li>
&lt;/ul>
&lt;h1 id="minecraft-inspired-arcade-game">Minecraft-inspired arcade game&lt;/h1>
&lt;p>Ino#7587 is working on a Minecraft-inspired arcade game, built using &lt;a href="https://github.com/Guigui220D/zig-sfml-wrapper">their Zig SFML wrapper&lt;/a>:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/153094991-4ddc48be-4684-48f9-b2a2-225c9f5f6e87.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/153094991-4ddc48be-4684-48f9-b2a2-225c9f5f6e87.png">&lt;/img>&lt;/a> &lt;a href="https://user-images.githubusercontent.com/3173176/153094998-8fba9b0f-f573-4f71-86fb-9b671f9b13c4.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/153094998-8fba9b0f-f573-4f71-86fb-9b671f9b13c4.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zig-minecraft-server-implementation">Zig Minecraft server implementation&lt;/h1>
&lt;p>&lt;a href="https://github.com/regenerativep">@regenerativep&lt;/a> is building a Minecraft server:&lt;/p>
&lt;blockquote>
&lt;p>to feel my way around zig and networking and the minecraft protocol. not a lot of functionality, but the server can be joined and you can see other players move around &lt;a href="https://github.com/regenerativep/zig-mc-server">https://github.com/regenerativep/zig-mc-server&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="learning-material">Learning material&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/s2g07j/zig_json_in_5_minutes/">Zig JSON in 5 minutes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://devlog.hexops.com/2022/zig-hashmaps-explained">Zig hashmaps explained&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/zig-adventures-on-ios-getting-started-3n8f">Zig adventures on iOS (multi-part series)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.reddit.com/r/Zig/comments/s5tafo/lets_build_an_entity_component_system_from/">Let&amp;rsquo;s build an Entity Component System from scratch (part 1)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig-by-example.com/">Zig by example&lt;/a> (new resource)&lt;/li>
&lt;li>&lt;a href="https://zig.news/lhp/want-to-create-a-tui-application-the-basics-of-uncooked-terminal-io-17gm">&amp;ldquo;Want to create a TUI application? - The Basics of &amp;ldquo;Uncooked&amp;rdquo; Terminal IO&amp;rdquo;&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/aransentin/analysis-of-the-overhead-of-a-minimal-zig-program-4lg0">&amp;ldquo;Analysis of the overhead of a minimal Zig program&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="major-new-library-developments">Major new library developments&lt;/h1>
&lt;ul>
&lt;li>Tiny and fast node-api bindings: &lt;a href="https://github.com/evanwashere/napi.zig">evanwashere/napi.zig&lt;/a>&lt;/li>
&lt;li>libxml2 Built with Zig: &lt;a href="https://github.com/mitchellh/zig-libxml2">mitchellh/zig-libxml2&lt;/a>&lt;/li>
&lt;li>Objective-C Runtime bindings: &lt;a href="https://github.com/hazeycode/zig-objcrt">hazeycode/zig-objcrt&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine">Finite state machine&lt;/a> library: &lt;a href="https://github.com/cryptocode/zigfsm">cryptocode/zigfsm&lt;/a>&lt;/li>
&lt;li>Text diffing (Myers' diff algorithm): &lt;a href="https://github.com/tomhoule/zig-diff">tomhoule/zig-diff&lt;/a>&lt;/li>
&lt;li>BTreeMap implementation: &lt;a href="https://github.com/pmkap/zig-btreemap">pmkap/zig-btreemap&lt;/a>&lt;/li>
&lt;li>Dynamic circular buffer allocator: &lt;a href="https://github.com/hmusgrave/zcirc">hmusgrave/zcirc&lt;/a>&lt;/li>
&lt;li>Compile-time validation of type constraints: &lt;a href="https://github.com/ibokuri/concepts">ibokuri/concepts&lt;/a> (&amp;ldquo;concepts is a library that provides compile-time validation of type constraints. It sort of aggregates the different ways you can validate a type in Zig into a more organized and consistent interface.&amp;quot;)&lt;/li>
&lt;li>Bindings for the GEOS C library (libgeos): &lt;a href="https://github.com/guidorice/libgeos.zig">guidorice/libgeos.zig&lt;/a>&lt;/li>
&lt;li>Serialization and deserialization framework: &lt;a href="https://github.com/getty-zig/getty">getty-zig/getty&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="thanks-for-reading">Thanks for reading!&lt;/h1>
&lt;p>If you like my work on zigmonthly, &lt;a href="https://devlog.hexops.com/categories/mach">Mach engine&lt;/a>, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, December 2021: GUI, NodeJS modules, optional GC &amp; more</title><link>https://zigmonthly.org/letters/2021/december/</link><pubDate>Fri, 31 Dec 2021 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/december/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/148187357-381b3b33-bc2b-4243-a704-6c21a65f5b26.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/148187357-381b3b33-bc2b-4243-a704-6c21a65f5b26.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="vulkan-gpu-path-tracing">Vulkan GPU path tracing&lt;/h1>
&lt;p>&lt;a href="https://github.com/ashpil">@ashpil&lt;/a> has been working on a GPU accelerated path tracer using vulkan-zig, GLFW, and the Vulkan ray tracing extensions:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/148028145-f231a70d-45de-467d-8b4e-70a5cc0eae85.mov" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/148028145-f231a70d-45de-467d-8b4e-70a5cc0eae85.mov">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/148177248-0d46e710-f8cc-49c6-928a-7193a413d215.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;blockquote>
&lt;p>It&amp;rsquo;s about 6K lines of code, I thought a realistic chess game would be a good way to learn some advanced graphics techniques, as the gameplay is so well established I could just focus on the visuals.&lt;/p>
&lt;p>Plans for the near future include performance optimizations (it probably lags less on an RTX series card but I&amp;rsquo;m on a 1080) and more interesting materials that take full advantage of path tracing.&lt;/p>
&lt;/blockquote>
&lt;p>They&amp;rsquo;re planning to publish the code on GitHub after polishing some more, you can keep an eye on their &lt;a href="https://github.com/ashpil">GitHub profile&lt;/a> or reach out to them on Discord (Brunch#9226) in the meantime!&lt;/p>
&lt;h1 id="async-generator-library">Async generator library&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/yrashk">Yurii Rashkovskii&lt;/a> published &lt;a href="https://github.com/yrashk/zig-generator">zig-generator&lt;/a>-a library for writing async generator functions, which I found best described by &lt;a href="https://github.com/yrashk/zig-generator/commit/bda35aa8c9691319b8ddb37b3294befe61a5014e">this commit message&lt;/a> (but be sure to check out the code examples in the README):&lt;/p>
&lt;blockquote>
&lt;p>Problem: what&amp;rsquo;s the point of generators?&lt;/p>
&lt;p>Generators look nice, but they are still slower than callbacks (as they naturally have more harness code).&lt;/p>
&lt;p>Solution: provide Map and Join generators&lt;/p>
&lt;p>The beauty of generators is that they are async and this allows us to build higher-level primitives.&lt;/p>
&lt;p>Of a particular interest is Join that will allow to consume values from two generators, as they come.&lt;/p>
&lt;/blockquote>
&lt;h1 id="zgt-a-zig-gui-toolkit">zgt: a Zig GUI toolkit&lt;/h1>
&lt;p>&lt;a href="https://github.com/zenith391">@zenith391&lt;/a> released v0.1 of &lt;a href="https://www.reddit.com/r/Zig/comments/ru7cp0/zgt_zig_gui_toolkit_01_has_been_released">zgt (Zig GUI Toolkit)&lt;/a>:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/148033333-8a7ab325-ebd5-48bc-87e4-f057820e0e82.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/148033333-8a7ab325-ebd5-48bc-87e4-f057820e0e82.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/148310446-60cac05f-839f-4b7b-ab11-0827a50f2bdd.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;blockquote>
&lt;p>zgt is a pure Zig (in fact, the only backend that needs libc is the GTK+ one) library for making cross-platform GUIs. It has first class support for animations and data binding. One notable thing is that its main aim is to use native widgets when available, but it (will) be able to draw widgets manually which will be used for the OpenGL ES backend. [&amp;hellip;] Only thing missing is a Cocoa / Mac OS backend.&lt;/p>
&lt;/blockquote>
&lt;h1 id="low-level-terminal-manipulation">Low level terminal manipulation&lt;/h1>
&lt;p>&lt;a href="https://github.com/xyaman">@xyaman&lt;/a> &lt;a href="https://github.com/xyaman/mibu">released mibu&lt;/a>, a library for low-level terminal manipulation, &amp;ldquo;[&amp;hellip;] Itâs far from complete, but the basics work&amp;rdquo;:&lt;/p>
&lt;blockquote>
&lt;p>Features:&lt;/p>
&lt;ul>
&lt;li>Allocation free.&lt;/li>
&lt;li>Raw mode.&lt;/li>
&lt;li>8-16 colors.&lt;/li>
&lt;li>True Color (24-bit RGB).&lt;/li>
&lt;li>Cursor controls.&lt;/li>
&lt;li>Clear(Erase) functions.&lt;/li>
&lt;li>Colors.&lt;/li>
&lt;li>Key events.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="tinyvg">TinyVG&lt;/h1>
&lt;p>&lt;a href="https://github.com/sponsors/MasterQ32">Felix &amp;ldquo;xq&amp;rdquo; QueiÃner&lt;/a> released &lt;a href="https://zig.news/xq/a-challenger-to-the-throne-of-vector-graphics-svg-is-dead-long-live-tinyvg-4on8">TinyVG&lt;/a>: &amp;ldquo;A challenger to the throne of vector graphics. SVG is dead, long live TinyVG!&amp;rdquo; - definitely worth checking out!&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/148180065-4b621b42-92c5-43ef-a573-661908fdf708.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/148180065-4b621b42-92c5-43ef-a573-661908fdf708.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="use-zig-to-build-native-nodejs-modules">Use Zig to build native NodeJS modules&lt;/h1>
&lt;p>&lt;a href="https://ziglang.org/download/0.9.0/release-notes.html">Zig 0.9 was released&lt;/a> - which has enabled zig ld to be used to create native NodeJS modules without node-gyp. You can find some exampls &lt;a href="https://twitter.com/jorandirkgreef/status/1473259997563961345">from the Tigerbeetle team here&lt;/a>!&lt;/p>
&lt;h1 id="self-hosted-compiler-progress">Self hosted compiler progress&lt;/h1>
&lt;p>Development of the self-hosted Zig compiler continues, with &lt;a href="https://twitter.com/andy_kelley/status/1477385526625792000">the most recent numbers&lt;/a> (Jan 1st, 2022) showing over 50% of behavior tests passing with the LLVM backend(!):&lt;/p>
&lt;blockquote>
&lt;p>Zig self-hosted compiler progress report:&lt;/p>
&lt;ul>
&lt;li>159,096 lines of code&lt;/li>
&lt;li>Behavior Tests Passing:
&lt;ul>
&lt;li>LLVM backend: 575/1078 (53%)&lt;/li>
&lt;li>C backend: 298/1078 (28%)&lt;/li>
&lt;li>WASM: 157/1078 (15%)&lt;/li>
&lt;li>ARM: 7/1078 (1%)&lt;/li>
&lt;li>x86: 0/1078 (0%)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>The 0.9 release notes included this awesome diagram:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/148181147-46e59b0b-b10a-453c-b357-4b7538a74ffd.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/148181147-46e59b0b-b10a-453c-b357-4b7538a74ffd.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="gamedev-progress">Gamedev progress&lt;/h1>
&lt;p>Progress continues in the area of gamedev, too, attempting to summarize:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/omaraaa">@omaraaa&lt;/a> published &lt;a href="https://github.com/omaraaa/VecFns">a vector math library&lt;/a> which extends your own &lt;code>Vec2f&lt;/code>, etc. struct declarations with methods - an interesting approach.&lt;/li>
&lt;li>&lt;a href="https://twitter.com/MichalZiulek">@MichalZiulek&lt;/a> has been hard at work on a SIMD-accelerated vector math package for zig-gamedev: &lt;a href="https://github.com/michal-z/zig-gamedev/blob/main/libs/common/zmath.zig">zmath&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://twitter.com/MichalZiulek">@MichalZiulek&lt;/a> published a &lt;a href="https://github.com/michal-z/zig-gamedev/wiki/Progress-Reports#december-2021">zig-gamedev December 2020 progress report&lt;/a>, including audio, mesh shaders, and more!&lt;/li>
&lt;li>I published &lt;a href="https://hexops.com/mach/">a website and roadmap for the upcoming Mach game engine&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="optional-garbage-collection">Optional garbage collection&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/mitchellh">Mitchell Hashimoto&lt;/a> (founder of Hashicorp) &lt;a href="https://twitter.com/mitchellh/status/1472652373319241731">wrote a wrapper for libgc in Zig&lt;/a> in order to learn how Zig interoperates with C (&amp;ldquo;turns out: exceptionally good&amp;rdquo;)&lt;/p>
&lt;p>The library implements the standard Zig &lt;code>Allocator&lt;/code> interface, and should allow one to mix and match garbage collection and manual memory management, very cool!&lt;/p>
&lt;h1 id="other-notable-mentions">Other notable mentions&lt;/h1>
&lt;ul>
&lt;li>Libraries
&lt;ul>
&lt;li>&lt;a href="https://github.com/MasterQ32/zig-qoi">zig-qoi&lt;/a>: a Zig implementation of the QOI image format&lt;/li>
&lt;li>&lt;a href="https://github.com/fubark/zig-v8">zig-v8&lt;/a>: Zig and C bindings for V8 useful for embedding V8 into projects.&lt;/li>
&lt;li>&lt;a href="https://github.com/mattnite/zig-zlib">zlib&lt;/a>, &lt;a href="https://github.com/mattnite/zig-libcurl">libcurl&lt;/a>, and more C library bindings from &lt;a href="https://github.com/mattnite">@mattnite&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>News
&lt;ul>
&lt;li>Coil (the company behind Tigerbeetle DB) &lt;a href="https://twitter.com/uchiuchibeke/status/1473717044331880450">recently began sponsoring Zig&lt;/a> and the Tigerbeetle team shared some &lt;a href="https://twitter.com/jorandirkgreef/status/1474697395028045824">interesting insights into how they use leverage comptime for their database&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://twitter.com/sheredom/status/1475441606207676419">@sheredom&lt;/a> and &lt;a href="https://twitter.com/postgoodism/status/1476999481228881921">@postgoodism&lt;/a> both shared Advent of Code postmortems after having completed it in Zig!&lt;/li>
&lt;li>&lt;a href="https://twitter.com/aransentin">Jens Goldberg&lt;/a> shared an &lt;a href="https://zig.news/aransentin/analysis-of-the-overhead-of-a-minimal-zig-program-4lg0">&amp;ldquo;Analysis of the overhead of a minimal Zig program&amp;rdquo;&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="thanks-for-reading">Thanks for reading!&lt;/h1>
&lt;p>If you like my work on zigmonthly, Mach engine, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, November 2021: Pixel art editor, meetup talks, Advent of Code &amp; more</title><link>https://zigmonthly.org/letters/2021/november/</link><pubDate>Mon, 06 Dec 2021 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/november/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/145131946-c52acf12-5859-4210-a1c1-fa67af567129.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/145131946-c52acf12-5859-4210-a1c1-fa67af567129.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="mini-pixel-a-tiny-pixel-art-editor-written-entirely-in-zig">Mini Pixel: a tiny pixel art editor written entirely in Zig&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/captainhorst">@captainhorst&lt;/a> just released &lt;a href="https://fabioarnold.itch.io/mini-pixel">Mini Pixel&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a tiny pixel art editor for Windows (for now?) inspired by the likes of IDraw3 and Graphics Gale. I&amp;rsquo;ve written it entirely in Zig. The GUI is done from scratch and inspired by Windows 95 or more recently Serenity OS :^). All the graphics and especially the icons are vector based. So, if you have a nice high resolution screen everything stays sharp. [&amp;hellip;]&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/144981141-f4c157e0-1599-4855-a97c-7264b1c273f8.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144981141-f4c157e0-1599-4855-a97c-7264b1c273f8.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://fabioarnold.itch.io/mini-pixel">Get it for free on itch.io now to try it out&lt;/a>, or &lt;a href="https://github.com/fabioarnold/MiniPixel">check out the code on GitHub&lt;/a>!&lt;/p>
&lt;h1 id="handmade-seattle-talks-demos--podcasts">Handmade Seattle talks, demos &amp;amp; podcasts&lt;/h1>
&lt;p>&lt;a href="https://www.handmade-seattle.com/">Handmade Seattle&lt;/a>, the Independent Systems Programming Conference was held with numerous Zig attendees from around the world meeting for the first time in person, with board games and discussions late into the night in the hotel lobby - truly a great time:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/144971958-3a3d867a-107c-4e59-8d81-55386be60f36.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144971958-3a3d867a-107c-4e59-8d81-55386be60f36.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>(image credit: &lt;a href="https://twitter.com/croloris/status/1460696987960025090">@croloris on Twitter&lt;/a>)&lt;/p>
&lt;p>Highly suggest checking out all of &lt;a href="https://media.handmade-seattle.com/">the Handmade Seattle talks&lt;/a> if you haven&amp;rsquo;t already. Some Zig highlights:&lt;/p>
&lt;p>&lt;em>&amp;ldquo;A Practical Guide to Applying Data-Oriented Design&amp;rdquo; - Andrew Kelley (talk)&lt;/em>&lt;/p>
&lt;p>&lt;a align="center" href="https://media.handmade-seattle.com/practical-data-oriented-design/">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144972765-e16f80e5-3c64-49c2-a3e8-558138df2023.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;The ZLD Linker&amp;rdquo; - Jakub Konka (demo)&lt;/em>&lt;/p>
&lt;p>&lt;a align="center" href="https://media.handmade-seattle.com/zld/">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144973106-f5f7477b-aedc-4283-a18b-49c93e3f323a.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;em>&amp;ldquo;The race to replace C and C++&amp;rdquo; - Andrew Kelley, Ginger Bill, and Mason Remaley debating the merits of Zig, Odin, and Rust respectively. (podcast)&lt;/em>&lt;/p>
&lt;p>&lt;a align="center" href="https://media.handmade-seattle.com/the-race-to-replace-c-and-cpp-2/">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144973530-b714129d-c9be-4256-b9a5-86ed6b0e6d50.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="rem-a-full-blown-html-parser-in-zig">Rem: a full-blown HTML parser in Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/chwayne/rem">@chwayne&lt;/a> has made a ton of progress on &lt;a href="https://github.com/chwayne/rem">Rem&lt;/a> - now a full-blown HTML parser in Zig:&lt;/p>
&lt;blockquote>
&lt;p>A while ago I shared an HTML parser that I was making. Only the tokenizer worked at that time, but I&amp;rsquo;ve made a lot of progress in the last few months, and it&amp;rsquo;s now a full-blown parser!&lt;/p>
&lt;/blockquote>
&lt;h1 id="zig-gamedev-gains-bullet-physics-and-more">zig-gamedev gains Bullet physics and more&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/MichalZiulek">@MichalZiulek&lt;/a> continues his full-time work on &lt;a href="https://github.com/michal-z/zig-gamedev">zig-gamedev&lt;/a>, an impressive project focused on gamedev using Zig, Windows 10+ APIs and DirectX 12. This month he released v0.2.0, bringing Bullet physics &lt;a href="https://github.com/michal-z/zig-gamedev/wiki/Progress-Reports">among other goodies&lt;/a>-check out the new &lt;a href="https://www.youtube.com/watch?v=9Ri6xS2-9k8">physics demo on YouTube&lt;/a>:&lt;/p>
&lt;p>&lt;a align="center" href="https://www.youtube.com/watch?v=9Ri6xS2-9k8">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144975676-4ddcf784-d8d6-4263-89a7-330920c185b8.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Michal works full-time on zig-gamedev, so keep an eye out for more from him and &lt;a href="https://github.com/sponsors/michal-z">consider sponsoring him on GitHub&lt;/a>!&lt;/p>
&lt;h1 id="using-zig-with-cypress-stm32-microcontrollers">Using Zig with Cypress STM32 microcontrollers&lt;/h1>
&lt;p>Arwalk has written up an interesting tutorial on &lt;a href="https://blog.arwalk.net/posts/zig_for_cypress_stm32/">how to use Zig with Cypress STM32 microcontrollers&lt;/a>.&lt;/p>
&lt;h1 id="avokadoens-zigvulkan-gamejam-submission">Avokadoen&amp;rsquo;s Zig+Vulkan gamejam submission&lt;/h1>
&lt;p>&lt;a href="https://github.com/Avokadoen">@Avokadoen&lt;/a> participated in a ~1 day gamejam using &lt;a href="https://github.com/Avokadoen/gamejam-zig-vulkan">nothing more than Zig and Vulkan&lt;/a>, producing this hilarious depiction of +2k sprites battling it out:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/144976657-4b57f964-3040-4909-8a1a-99526dd53e85.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/144976657-4b57f964-3040-4909-8a1a-99526dd53e85.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144976534-a71e3410-056b-46ff-8440-79af7bd3f8c3.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="zig-compiler-progress">Zig compiler progress&lt;/h1>
&lt;p>Austin Rude has enhanced the &lt;a href="https://ziglang.org/perf">https://ziglang.org/perf&lt;/a> performance dashboard:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/144986700-4eb53892-a26c-4d57-968a-db04d93a02f5.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144986700-4eb53892-a26c-4d57-968a-db04d93a02f5.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Meanwhile, Andrew Kelley continues regular progress reports for the development of the self-hosted Zig compiler &lt;a href="https://twitter.com/andy_kelley/status/1467652028159561728?s=20">on Twitter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Thanks to great work from Luuk de Gram, WASM joins the progress bar!&lt;/p>
&lt;p>Zig self-hosted compiler progress report:&lt;/p>
&lt;ul>
&lt;li>153,862 lines of code&lt;/li>
&lt;li>Behavior Tests Passing:
&lt;ul>
&lt;li>LLVM backend: 467/1072 (44%)&lt;/li>
&lt;li>C backend: 234/1072 (22%)&lt;/li>
&lt;li>WASM: 135/1072 (13%)&lt;/li>
&lt;li>ARM, x86: 0/1072 (0%)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Additionally, the Zig v0.9 release is rapidly approaching-it will include numerous bug fixes and improvements-so &lt;a href="https://twitter.com/ziglang">keep an eye out for that coming soon&lt;/a>!&lt;/p>
&lt;h1 id="zig-on-the-oculus-quest-proof-of-concept">Zig on the Oculus Quest (proof of concept)&lt;/h1>
&lt;p>&lt;a href="https://github.com/SpexGuy">@SpexGuy&lt;/a> has created a repository with an example of how to create a minimal Oculus Quest app in Zig. Although just a proof of concept and not suitable for production use, it&amp;rsquo;s a very compelling idea-&lt;a href="https://github.com/SpexGuy/Zig-Oculus-Quest">check it out on GitHub and consider contributing to the project yourself!&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/144982632-4574fd93-766c-4619-90f6-9b0e11e3dfc4.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/144982632-4574fd93-766c-4619-90f6-9b0e11e3dfc4.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="learn-zig-by-joining-the-advent-of-code">Learn Zig by joining the Advent of Code&lt;/h1>
&lt;p>If you&amp;rsquo;ve been waiting for the perfect time to try and learn Zig, I highly encourage joining the several people who are doing the &lt;a href="https://adventofcode.com/2021">Advent of Code&lt;/a> in Zig&lt;/p>
&lt;blockquote>
&lt;p>Advent of Code is an Advent calendar of small programming puzzles for a variety of skill sets and skill levels that can be solved in any programming language&lt;/p>
&lt;/blockquote>
&lt;p>Here are a few ways you can join in:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://discord.gg/gxsFFjE">Join the Zig Programming Language Discord&lt;/a> #advent-of-code and #zig-help channels.&lt;/li>
&lt;li>Follow &lt;a href="https://twitter.com/nektro">@nektro&lt;/a> on Twitter and Twitch, who is &lt;a href="https://twitter.com/nektro/status/1466016831483756545">streaming her answers in Zig on most days.&lt;/a>&lt;/li>
&lt;li>Join a Zig leaderboard and discuss &lt;a href="https://www.reddit.com/r/Zig/comments/r2yedk/advent_of_code_2021/">on Reddit&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>And don&amp;rsquo;t forget to add yourself to the &lt;a href="https://github.com/zig-community/user-map">Zig user community world map&lt;/a> if you decide to stick around in the community :)&lt;/p>
&lt;h1 id="a-brief-note-from-me">A brief note from me&lt;/h1>
&lt;p>The November issue of zigmonthly was delayed due to me getting &lt;del>COVID?&lt;/del> superflu?, I&amp;rsquo;m much better now, but sorry for the delay!&lt;/p>
&lt;p>When I started zigmonthly just a few months ago, my only goal was to bring more attention to the really awesome work that I kept seeing people post in Discord, on Twitter, etc. and aggregate it for people like myself who, when looking at Zig for the first time, may not be able to get a super clear picture of just how many people really are using Zig today.&lt;/p>
&lt;p>Today, zigmonthly goes out to over 400+ subscribers and has had &lt;a href="https://opendata.hexops.com/zigmonthly.org?period=12mo">16,000+ viewers&lt;/a>. It absolutely means the world to me that this has been able to draw more attention to the awesome work everyone is doing in Zig-so thank you for reading!&lt;/p>
&lt;hr>
&lt;p>If you like my work on zigmonthly, Mach engine, etc. consider &lt;a href="https://github.com/sponsors/slimsag">sponsoring me on GitHub&lt;/a> so I can do even more of it!&lt;/p></description></item><item><title>Zig monthly, October 2021: Games, gamedev, Elixir, tools &amp; more</title><link>https://zigmonthly.org/letters/2021/october/</link><pubDate>Tue, 02 Nov 2021 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/october/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139949770-9002e36d-3c00-447c-a9ab-b9f52c251b28.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Wow! So much has happened over the last month in Zig that it&amp;rsquo;s been downright overwhelming, let&amp;rsquo;s dive right in!&lt;/p>
&lt;h1 id="digital-scavenger-game">Digital Scavenger (game)&lt;/h1>
&lt;p>&lt;a href="https://github.com/sponsors/MasterQ32">Felix &amp;ldquo;xq&amp;rdquo; QueiÃner&lt;/a> - you may recall his &lt;a href="https://zigmonthly.org/letters/2021/september#android-support">Android support&lt;/a> in the last zigmonthly. He&amp;rsquo;s back, and this time sharing an early gameplay video of his Digital Scavenger game prototype:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139792411-55d711fe-3504-44bd-9f04-79f944cf4c83.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139792411-55d711fe-3504-44bd-9f04-79f944cf4c83.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793155-c6ef5256-be38-421f-847e-4909369fd30c.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>As he &lt;a href="https://twitter.com/ikskuh/status/1455225369804562434">writes on Twitter&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Full feature showcase of my current gamedev project. Most of the stuff started to come into reality in the last week and everything is still just a prototype.&lt;/p>
&lt;p>It&amp;rsquo;s built with Zig, OpenGL ES 2.0 and a lot of love, also uses Box2D.&lt;/p>
&lt;/blockquote>
&lt;p>I highly encourage &lt;a href="https://github.com/sponsors/MasterQ32">checking out his other work.&lt;/a>&lt;/p>
&lt;h1 id="cross-platform-elixir-applications-using-zig">Cross-platform Elixir applications using Zig&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/wilton_quinn/status/1453152473112145928">Quinn Wilton shared&lt;/a> Burrito, a project by &lt;a href="https://twitter.com/doawoo">@doawoo&lt;/a> which uses Zig to enable building cross-platform Elixir applications&lt;/p>
&lt;blockquote>
&lt;p>I&amp;rsquo;m thrilled to open source work we&amp;rsquo;ve done to support building cross-platform Elixir applications!&lt;/p>
&lt;p>We&amp;rsquo;re using this code in production to distribute command-line applications to on-premise customer environments, without an installed Erlang runtime.&lt;/p>
&lt;/blockquote>
&lt;p>It is accompanied by an excellent talk at ElixirConf 2021 &lt;a href="https://www.youtube.com/watch?v=lDfjdGva3NE&amp;amp;list=PLqj39LCvnOWZna91xJ_i44g3rx4Brbpnv">which you can watch here&lt;/a>.&lt;/p>
&lt;p>&lt;em>&lt;strong>EDIT:&lt;/strong> Updated to clarify the project is by &lt;a href="https://twitter.com/doawoo">@doawoo&lt;/a> (Quinn: &lt;a href="https://twitter.com/wilton_quinn/status/1455653326129807362?s=20">&amp;ldquo;I just want to make sure to credit @doawoo
for Burrito. I was involved, but it&amp;rsquo;s really their project.&amp;quot;&lt;/a>)&lt;/em>&lt;/p>
&lt;h1 id="zig-gamedev-project">zig-gamedev project&lt;/h1>
&lt;p>&lt;a href="https://github.com/michal-z">@michal-z&lt;/a>, independent graphics programmer &amp;amp; ex-AMD/Frostbite/EA DICE/Intel engineer shares the &lt;a href="https://github.com/michal-z/zig-gamedev">zig-gamedev project&lt;/a>:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139600261-8c424980-afeb-4774-8ec9-aa8e5eca3662.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139600261-8c424980-afeb-4774-8ec9-aa8e5eca3662.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793223-f3a68592-7d05-4355-a2ee-867e12b9d077.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/139600273-f2fbd11c-dfa3-4f6a-b1c0-fab486332e82.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/139600273-f2fbd11c-dfa3-4f6a-b1c0-fab486332e82.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139793304-13e225c5-6a8b-4ff7-b59b-e7707b88d841.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>He recently &lt;a href="https://twitter.com/MichalZiulek/status/1447830542330826752">left a highly paid position at AMD&lt;/a> to work on his own indie game written in Zig. As a first step to build a full game he has created an open-source project called &lt;a href="https://github.com/michal-z/zig-gamedev">zig-gamedev&lt;/a>. This project contains growing collection of sample applications, libraries and other tools for game developers using Zig. The goal of the project is to build necessary technology, share knowledge, help others and promote the language. He works on it full-time, so &lt;a href="https://github.com/sponsors/michal-z">please consider supporting Michal on GitHub&lt;/a>.&lt;/p>
&lt;blockquote>
&lt;p>I build game development stuff in Zig full-time. If you like my work and my mission to promote the language, please consider supporting me. I will create more sample applications, libraries and complete mini-games. I have game development knowledge and experience and I want to share it with others by writing open-source software in Zig.&lt;/p>
&lt;/blockquote>
&lt;h1 id="fuzz-testing">Fuzz testing&lt;/h1>
&lt;p>Ryan Liptak shared an &lt;a href="https://www.ryanliptak.com/blog/improving-fuzz-testing-with-zig-allocators/">excellent article&lt;/a> on improving fuzz testing using the AFL fuzzer with Zig allocators.&lt;/p>
&lt;h1 id="zig-snapshots-debugger">Zig snapshots debugger&lt;/h1>
&lt;p>&lt;a href="https://github.com/kubkon">@kubkon&lt;/a>, the Zig core team member working on the Zig linker, announced &lt;a href="https://github.com/kubkon/zig-snapshots">zig-snapshots&lt;/a> - an interactive debugging tool allowing you to preview snapshots of Zig&amp;rsquo;s incremental linker progression between subsequent incremental updates:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139801303-7fc75638-61ab-4401-a285-68d9ca380052.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139801303-7fc75638-61ab-4401-a285-68d9ca380052.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zig-self-hosted-compiler-progress">Zig self-hosted compiler progress&lt;/h1>
&lt;p>Andrew Kelley is &lt;a href="https://twitter.com/andy_kelley/status/1448869273431011330">sharing regular progress updates&lt;/a> on the Zig self-hosted compiler, which is a major milestone for Zig:&lt;/p>
&lt;blockquote>
&lt;p>Zig self-hosted compiler progress report:&lt;/p>
&lt;ul>
&lt;li>140,331 lines of code&lt;/li>
&lt;li>Behavior Test Suite:
&lt;ul>
&lt;li>LLVM backend: 365/1057 (35%) passing&lt;/li>
&lt;li>C backend: 42/1057 (4%) passing&lt;/li>
&lt;li>arm and x86 backends: work in progress towards the first passing test case&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Zig self-hosted &lt;a href="https://twitter.com/andy_kelley/status/1448869273431011330">https://twitter.com/andy_kelley/status/1448869273431011330&lt;/a>&lt;/p>
&lt;h1 id="glfw-bindings">GLFW bindings&lt;/h1>
&lt;p>This one from yours truly. I&amp;rsquo;ve announced &lt;a href="https://github.com/hexops/mach-glfw">mach-glfw&lt;/a>: Ziggified GLFW bindings with 100% API coverage, zero-fuss installation, cross compilation, and more as well as a &lt;a href="https://github.com/hexops/mach-glfw-vulkan-example">Vulkan example&lt;/a> to go along with it. This one small step towards &lt;a href="https://devlog.hexops.com/2021/mach-engine-the-future-of-graphics-with-zig">my vision for Mach engine&lt;/a>.&lt;/p>
&lt;p>Learn more: &lt;a href="https://devlog.hexops.com/2021/perfecting-glfw-for-zig-and-finding-undefined-behavior">Perfecting GLFW for Zig, and finding lurking undefined behavior that went unnoticed for 6+ years&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139573985-d862f35a-e78e-40c2-bc0c-9c4fb68d6ecd.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="using-zig-and-translate-c-to-understand-weird-c-code">Using Zig and translate-c to understand weird C code&lt;/h1>
&lt;p>Over on zig.news, &lt;a href="https://zig.news/sobeston">Sobeston&lt;/a> has published &lt;a href="https://zig.news/sobeston/using-zig-and-translate-c-to-understand-weird-c-code-4f8">a very interesting article&lt;/a> walking through how they use Zig&amp;rsquo;s translate-c functionality (which converts C code to Zig code) to understand what a strange C code snippet is doing. Very much worth the read.&lt;/p>
&lt;h1 id="andrew-kelley-on-the-sourcegraph-podcast">Andrew Kelley on the Sourcegraph podcast&lt;/h1>
&lt;p>Recently I got the opportunity to join Andrew Kelley on the Sourcegraph podcast through my dayjob (I work at Sourcegraph), it&amp;rsquo;s a high-level chat around why Andrew built Zig, the challenges in doing so, how programmers can get funding for their side projects and hobbies, the differences between Zig and C, and why and how Zig can be faster than both C and Rust. Check it out on YouTube below or &lt;a href="https://about.sourcegraph.com/podcast/andrew-kelley/">read it here&lt;/a>.&lt;/p>
&lt;p>&lt;a align="center" href="https://www.youtube.com/watch?v=gn3YsZ6HUHw">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/139802947-59c266c7-8caf-4fe2-b6a0-2d8dd7dc909c.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="sat-november-6th-zig-showtime">Sat November 6th: Zig SHOWTIME!&lt;/h1>
&lt;p>We&amp;rsquo;re just a few days away from the next Zig SHOWTIME episode. Join live by going to &lt;a href="https://zig.show">https://zig.show&lt;/a> for more info, or &lt;a href="https://calendar.google.com/calendar/embed?src=8a028atr03arr440lsqp4a5tls%40group.calendar.google.com&amp;amp;ctz=Europe%2FRome&amp;amp;utm_source=ZigSHOWTIME&amp;amp;utm_medium=email&amp;amp;utm_campaign=zig-rush-zig-showtime-30">subscribe to the Zig SHOWTIME calendar&lt;/a> (&lt;a href="https://calendar.google.com/calendar/ical/8a028atr03arr440lsqp4a5tls%40group.calendar.google.com/public/basic.ics?utm_source=ZigSHOWTIME&amp;amp;utm_medium=email&amp;amp;utm_campaign=zig-rush-zig-showtime-30">iCal&lt;/a>) to have all episodes automatically added to your calendar.&lt;/p>
&lt;h1 id="nov-11-12th-handmade-seattle-conference">Nov 11-12th: Handmade Seattle conference!&lt;/h1>
&lt;p>Whether you join remotely or in-person, &lt;a href="https://www.handmade-seattle.com/">Handmade Seattle&lt;/a>, the Independent Systems Programming Conference is here!&lt;/p>
&lt;p>Several members of the Zig community are joining both online, and in person (myself included). The conference will also feature talks by Andrew Kelley,&lt;/p>
&lt;p>Andrew Kelley and others in the Zig community will also be giving talks and demos, so you won&amp;rsquo;t want to miss it!&lt;/p>
&lt;hr>
&lt;p>Zigmonthly recently surpassed 300+ subscribers and 7k+ viewers, and this is just the third article! Thanks so much for reading and being a part of this!&lt;/p>
&lt;p>If you like my work, you can &lt;a href="https://github.com/sponsors/slimsag">sponsor me on GitHub&lt;/a>&lt;/p></description></item><item><title>Zig monthly, September 2021: Unicode, Android, cross-platform GUIs, learning resources &amp; more</title><link>https://zigmonthly.org/letters/2021/september/</link><pubDate>Sat, 25 Sep 2021 00:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/september/</guid><description>&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134820515-8d672889-4deb-4b82-bec0-8497de9293f8.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134820515-8d672889-4deb-4b82-bec0-8497de9293f8.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="slingworks--the-underburrow-game">Slingworks &amp;amp; The Underburrow game&lt;/h1>
&lt;blockquote>
&lt;p>&lt;em>Underburrow is a speed running platformer game where you gather momentum with well timed button taps&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://github.com/JonSnowbd/slingworks">@JonSnowbd shares &lt;em>Slingworks 0.1&lt;/em>&lt;/a>: a simple and powerful Windows+Linux &amp;lsquo;bring your content&amp;rsquo; engine built in Zig, as well as &lt;a href="https://github.com/JonSnowbd/underburrow">Underburrow&lt;/a>: an all encompassing example for how Slingworks development works.&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/134818362-4736ee45-1aa0-407c-92b0-c4a5b301d4d4.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/134818362-4736ee45-1aa0-407c-92b0-c4a5b301d4d4.mp4">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134818764-20d3f95c-090c-4000-8595-7e205247360e.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>Both are still heavily under development, but it&amp;rsquo;s already quite cool:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/134818377-5f4f40dc-9436-4aef-906e-7256d8f5c2a9.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818377-5f4f40dc-9436-4aef-906e-7256d8f5c2a9.png">&lt;/img>&lt;/a> &lt;a href="https://user-images.githubusercontent.com/3173176/134818383-1a2d2e23-0907-47cb-89be-b2b019e487b5.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818383-1a2d2e23-0907-47cb-89be-b2b019e487b5.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/134818386-bcadf2f4-08c6-4b3b-8770-b06a8a7a1721.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818386-bcadf2f4-08c6-4b3b-8770-b06a8a7a1721.png">&lt;/img>&lt;/a> &lt;a href="https://user-images.githubusercontent.com/3173176/134818389-a8840e3c-cb5d-43d8-b71e-2a7e7a4c56f0.png">&lt;img width="240px" src="https://user-images.githubusercontent.com/3173176/134818389-a8840e3c-cb5d-43d8-b71e-2a7e7a4c56f0.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Check it out: &lt;a href="https://github.com/JonSnowbd/slingworks">Slingworks&lt;/a> | &lt;a href="https://github.com/JonSnowbd/underburrow">Underburrow&lt;/a>&lt;/p>
&lt;h1 id="unicode">Unicode&lt;/h1>
&lt;p>Unicode is complex: even in languages with excellent support for it such as Go (by creators as UTF-8 itself) there is still regular confusion and subtle bugs &lt;a href="https://www.reddit.com/r/golang/comments/o1o5hr/fyi_a_single_go_rune_is_not_the_same_as_a_single/">lurking behind incorrect assumptions about what runes/code-points and grapheme clusters are.&lt;/a>.&lt;/p>
&lt;p>Zig has, thus far, taken a &lt;em>lighter weight&lt;/em> stance on Unicode: there are no native unicode types in the language, and the standard library is light weight in terms of Unicode support.&lt;/p>
&lt;p>But many in the Zig community, myself included, care about Unicode support immensely - and &lt;a href="https://github.com/jecolon">@jecolon&lt;/a> has been working tirelessly on two libraries:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/jecolon/ziglyph">Ziglyph&lt;/a>: Unicode text processing for the Zig Programming Language.&lt;/li>
&lt;li>&lt;a href="https://github.com/jecolon/zigstr">Zigstr&lt;/a>: A UTF-8 string type (which exposes Grapheme clusters instead of code points to avoid foot-guns.)&lt;/li>
&lt;/ul>
&lt;p>As well as a series of articles:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/unicode-basics-in-zig-dj3">Unicode basics in Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/ziglyph-unicode-wrangling-llj">Ziglyph Unicode wrangling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/dude_the_builder/unicode-string-operations-536e">Unicode string operations&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/andrewrk">@andrewrk&lt;/a> and &lt;a href="https://github.com/jecolon">@jecolon&lt;/a> are also &lt;a href="https://github.com/ziglang/zig/issues/234#issuecomment-922065852">working together&lt;/a> to ensure Zig&amp;rsquo;s &lt;code>std.unicode&lt;/code> library is a reasonable API in general before Zig 1.0.&lt;/p>
&lt;h1 id="android-support">Android support&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32/ZigAndroidTemplate">@MasterQ32 has created a Zig android template repository&lt;/a> - showing off how to create a minimal Android app in Zig.&lt;/p>
&lt;p>Also see his earlier 2021 FOSDEM talk: &lt;a href="https://fosdem.org/2021/schedule/event/zig_android/">Create an Android Application with Zig&lt;/a> - I&amp;rsquo;ve included a short clip of the demo within for your enjoyment:&lt;/p>
&lt;video align="center" width="650px" src="https://user-images.githubusercontent.com/3173176/134788433-811ce689-ed38-40d3-8fda-09f5364e9734.mov" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/134788433-811ce689-ed38-40d3-8fda-09f5364e9734.mov">
&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134788463-ee505626-01d0-435c-9f74-05b0483aee74.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;p>Felix also has aspirations to do Zig-on-iOS work, so please &lt;a href="https://github.com/sponsors/MasterQ32">consider sponsoring him&lt;/a> for some Apple hardware if his work appeals to you!&lt;/p>
&lt;h1 id="test-your-c-code-with-zig">Test your C code with Zig&lt;/h1>
&lt;p>&lt;a href="https://twitter.com/TommiSinivuo">@Pixeli&lt;/a> on Twitter has shared an extremely cool topic: &lt;a href="https://twitter.com/TommiSinivuo/status/1432393016761856003">how to easily test your existing C code using Zig&lt;/a>.&lt;/p>
&lt;h1 id="iup-cross-platform-gui-for-zig">IUP (cross platform GUI) for Zig&lt;/h1>
&lt;p>Rafael Batiati has shared a very interesting article: &lt;a href="https://zig.news/batiati/iup-for-zig-4ah">IUP for Zig&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s a cross-platform GUI toolkit developed by PUC-RIO, the same university behind the excellent Lua language.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789187-8e3eddef-30e2-4fd7-b296-eb4de0f911f1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789187-8e3eddef-30e2-4fd7-b296-eb4de0f911f1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789196-25ead67b-3939-49a1-b065-1ba77762ceb1.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789196-25ead67b-3939-49a1-b065-1ba77762ceb1.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="robinhood-hash-tables">Robinhood hash tables&lt;/h1>
&lt;p>&lt;a href="https://github.com/lithdew">Kenta Iwasaki&lt;/a> shared their robin hash table implementation:&lt;/p>
&lt;blockquote>
&lt;p>A robin hood hash table that keeps entries lexicographically sorted. Assumes that keys are 256-bit cryptographic hashes. Able to insert 25.8 million entries per second, query 30.83 million entries per second, and delete 24.21 million entries per second.&lt;/p>
&lt;p>Using it as one of the core main-memory data structures for a blockchain I&amp;rsquo;m writing in Zig called Rheia. Wrote and improved upon the data structure based on Twitter comments and articles made by Per Vognsen and Paul Khuong.&lt;/p>
&lt;p>Beats any other sorted data structure I&amp;rsquo;ve benchmarked so far in terms of insertion/query/deletion throughput by 3-4x order of magnitudes.&lt;/p>
&lt;p>&lt;a href="https://github.com/lithdew/rheia/blob/master/hash_map.zig">https://github.com/lithdew/rheia/blob/master/hash_map.zig&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="ray-tracing-in-a-weekend">Ray tracing in a weekend&lt;/h1>
&lt;p>&lt;a href="https://github.com/Jack-Ji/ray-tracing-weekend.zig">@Jack-Ji has implemented&lt;/a> the famous &lt;a href="https://raytracing.github.io">ray-tracing-in-a-weekend&lt;/a> in Zig:&lt;/p>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/3173176/134789958-20a0d223-6510-42b5-8878-d7ad94f8c14c.png">&lt;img width="650px" src="https://user-images.githubusercontent.com/3173176/134789958-20a0d223-6510-42b5-8878-d7ad94f8c14c.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="fast-lru-cache">Fast LRU cache&lt;/h1>
&lt;p>Also brought to us by &lt;a href="https://github.com/lithdew">Kenta Iwasaki&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Wrote a really fast LRU cache that is an amalgamation of both a robin hood hash table and a doubly-linked deque.&lt;/p>
&lt;p>On my laptop, with a max load factor of 50%, roughly:&lt;/p>
&lt;ul>
&lt;li>19.81 million entries can be upserted per second.&lt;/li>
&lt;li>20.19 million entries can be queried per second.&lt;/li>
&lt;li>9.97 million entries can be queried and removed per second.&lt;/li>
&lt;/ul>
&lt;p>The code is available here w/ unit tests and benchmarks: &lt;a href="https://github.com/lithdew/rheia/blob/master/lru.zig">https://github.com/lithdew/rheia/blob/master/lru.zig&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="exceptional-articles">Exceptional articles&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/andres/crafting-an-interpreter-in-zig-part-1-jdh">Crafting an Interpreter in Zig&lt;/a> - Andres&lt;/li>
&lt;li>&lt;a href="https://zig.news/xq/zig-build-explained-part-1-59lf">Zig build explained&lt;/a> - Felix &amp;ldquo;xq&amp;rdquo; QueiÃner&lt;/li>
&lt;li>&lt;a href="https://zig.news/david_vanderson/interfaces-in-zig-o1c">Interfaces in Zig&lt;/a> - David Vanderson&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/struct-of-arrays-soa-in-zig-easy-in-userland-40m0">Struct of Arrays (SoA) in Zig? Easy &amp;amp; in Userland!&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/andrewrk/how-to-use-hash-map-contexts-to-save-memory-when-doing-a-string-table-3l33">How to use hash map contexts to save memory when doing a string table&lt;/a> - Andrew Kelley&lt;/li>
&lt;li>&lt;a href="https://zig.news/squeek502/code-coverage-for-zig-1dk1">Code coverage for Zig&lt;/a> - Ryan Liptak&lt;/li>
&lt;li>&lt;a href="https://zig.news/kprotty/resource-efficient-thread-pools-with-zig-3291">Resource efficient Thread Pools with Zig&lt;/a> - Protty&lt;/li>
&lt;/ul>
&lt;h1 id="learning-zig">Learning Zig&lt;/h1>
&lt;p>&lt;a align="center" href="https://user-images.githubusercontent.com/1458409/109398392-c1069500-790a-11eb-8ed4-7d7d74d32666.jpg">&lt;img width="650px" src="https://user-images.githubusercontent.com/1458409/109398392-c1069500-790a-11eb-8ed4-7d7d74d32666.jpg">&lt;/img>&lt;/a>&lt;/p>
&lt;p>Now seems like an excellent time to point out two resources for anyone considering learning Zig:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ratfactor/ziglings">Ziglings&lt;/a>: a series of tiny broken programs. By fixing them, you&amp;rsquo;ll learn how to read and write Zig code.&lt;/li>
&lt;li>&lt;a href="https://ziglang.org/documentation/master">ziglang.org/documentation/master&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://ziglearn.org">ziglearn.org&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="new-zig-tutorials">New Zig tutorials&lt;/h1>
&lt;p>Since &lt;a href="https://zigmonthly.org/letters/2021/august/#tutorials">last month&amp;rsquo;s beginner tutorials&lt;/a>, &lt;a href="https://zig.news">https://zig.news&lt;/a> has blown up with awesome tutorials all around:&lt;/p>
&lt;ul>
&lt;li>Intro to Zig - Sobeston:
&lt;ul>
&lt;li>&lt;a href="https://zig.news/sobeston/fizz-buzz-3fao">Fizz Buzz&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/sobeston/fahrenheit-to-celsius-akf">Fahrenheit to Celsius&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/sobeston/a-guessing-game-5fb1">A guessing game&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-undefined-in-zig-9h">What&amp;rsquo;s undefined in Zig?&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-a-string-literal-in-zig-31e9">What&amp;rsquo;s a String Literal in Zig?&lt;/a> - Loris Cro&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/how-to-add-buffering-to-a-writer-reader-in-zig-7jd">How to Add Buffering to a Reader / Writer in Zig&lt;/a> - Loris Cro&lt;/li>
&lt;li>C/C++/Zig interoperability - Loris Cro
&lt;ul>
&lt;li>&lt;a href="https://zig.news/kristoff/extend-a-c-c-project-with-zig-55di">Extend a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/make-zig-your-c-c-build-system-28g5">Make Zig Your C/C++ Build System&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/cross-compile-a-c-c-project-with-zig-3599">Cross-compile a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/compile-a-c-c-project-with-zig-368j">Compile a C/C++ Project with Zig&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="new-podcasts--videos">New podcasts &amp;amp; videos&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=tQHTvQqBhS8">Zig â¡ SHOWTIME #29: Don&amp;rsquo;t Rewrite, Reinvent!&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://youtu.be/QFOxAUjXe0g">CoffeeTIME: The ZSF is 1 year old!&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=1F5eprScpvA">CoffeeTIME: AWS â¤ï¸ Rust&lt;/a> - an insightful discussion about the relationship between AWS and Rust&lt;/li>
&lt;li>Launching the &lt;a href="https://www.tigerbeetle.com/20k-challenge">TigerBeetle $20,000 consensus challenge&lt;/a>, there was a 2.5 hour &lt;a href="https://www.youtube.com/watch?v=_Jlikdtm4OA">Zig â¡ SHOWTIME #28: Viewstamped Replication Made Famous&lt;/a>.&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=qeWyc8G-lq4">Viewstamped Replication Made Famous - Joran Greef&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=ps106zjmjhw">Revisiting Viewstamped Replication with Brian Oki and James Cowling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/channel/UCpaTqf90rm1jmJI49BtVMRw">Coderlyfe&lt;/a> has been steadily producing a series of Zig video tutorials if that&amp;rsquo;s your cup of mocha:
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=4XrsIOkS5sY">Optionals&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=hv71foOAPVk">Blocks and closures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=t9EUoSojDUw">Errors / exception handling&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=bS7jtl-CoEs">Allocators&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=JEHZJHfiAfk">Unions/variants&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=NN1GC0E8J6I">Structs and OOP&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="upcoming-events">Upcoming events&lt;/h1>
&lt;p>&lt;a href="https://www.handmade-seattle.com">Handmade Seattle&lt;/a> has several attendees from the Zig community, as well as talks and demos for Zig November 11-12, 2021.&lt;/p>
&lt;p>P.S. In case you missed it, &lt;a href="https://ziglang.org/download/0.8.1/release-notes.html">Zig 0.8.1 has been released&lt;/a>!&lt;/p>
&lt;hr>
&lt;p>If you&amp;rsquo;re one of the 150+ subscribers or &lt;a href="https://zigmonthly.org/privacy">3.5k+ viewers&lt;/a>, thanks for reading!&lt;/p>
&lt;p>Please consider &lt;a href="https://github.com/sponsors/slimsag">supporting my work&lt;/a>&lt;/p></description></item><item><title>Zig monthly, August 2021: iOS support, tutorials, tree-sitter, a pathtracer, and more</title><link>https://zigmonthly.org/letters/2021/august/</link><pubDate>Sun, 01 Aug 2021 03:00:00 -0700</pubDate><guid>https://zigmonthly.org/letters/2021/august/</guid><description>&lt;h1 id="announcing-zigmonthlyorg">Announcing zigmonthly.org&lt;/h1>
&lt;p>Today, I am launching zigmonthly.org: a once-a-month publication where I curate all things Zig that Iâve seen since the past month from the Zig Discord channels, &lt;a href="https://zig.news">zig.news&lt;/a>, Twitter, Reddit, etc. and do my best to come up with a nice showcase. &lt;a href="https://zigmonthly.org/about">Learn more&lt;/a>&lt;/p>
&lt;h1 id="zig-cross-compiling-to-ios-yes-please">Zig cross compiling to iOS? Yes please!&lt;/h1>
&lt;p>Nearly matching up with &lt;a href="https://twitter.com/andy_kelley/status/1424163667306631168">Zig&amp;rsquo;s 6th birthday&lt;/a>, &lt;a href="https://github.com/kubkon">@kubkon&lt;/a> (a core team member and author of Zig&amp;rsquo;s MachO linker) has begun &lt;a href="https://github.com/ziglang/zig/pull/9532">adding minimal support for building iOS binaries with Zig, from any OS&lt;/a>. Here&amp;rsquo;s one running in the iOS emulator on a Mac:&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/128664203-c9c0954d-fe74-43aa-964d-458f0fe74565.png">&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128664203-c9c0954d-fe74-43aa-964d-458f0fe74565.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="tree-sitter-for-zig">Tree Sitter for Zig&lt;/h1>
&lt;p>&lt;a href="https://github.com/maxxnino">@maxxnino&lt;/a> has released a &lt;a href="https://github.com/maxxnino/tree-sitter-zig">tree sitter parser for Zig&lt;/a>.&lt;/p>
&lt;p>(&lt;a href="https://tree-sitter.github.io/tree-sitter/">Tree-sitter&lt;/a> is a parsing framework from GitHub used for a variety of editors and IDEs, such as &lt;a href="https://neovim.io/doc/treesitter">NeoVim&lt;/a> and OniVim for code navigation and syntax highlighting. It&amp;rsquo;s also used by static analysis tools like &lt;a href="https://semgrep.dev">Semgrep&lt;/a> and powers GitHub&amp;rsquo;s code navigation features - so having an implementation for Zig could prove quite useful!)&lt;/p>
&lt;h1 id="a-twin-stick-shooter">A twin stick shooter&lt;/h1>
&lt;p>@unvestigate &lt;a href="https://discord.com/channels/605571803288698900/605572611539206171/873274345160589392">shared in the Zig discord&lt;/a> a video of their twin stick shooter they began building four days ago, with all gameplay code in Zig:&lt;/p>
&lt;video width="480px" src="https://user-images.githubusercontent.com/3173176/128664622-b3f37ad2-56ba-47ba-bc53-4ee87893b009.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/128664622-b3f37ad2-56ba-47ba-bc53-4ee87893b009.mp4">
&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128806787-a091b018-3881-46e2-804f-53ee8863cca2.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="prometheus-style-metrics-for-your-zig-applications">Prometheus-style metrics for your Zig applications&lt;/h1>
&lt;p>&lt;a href="https://github.com/vrischmann">@vrischmann&lt;/a> released &lt;a href="https://github.com/vrischmann/zig-prometheus">a library&lt;/a> that enables one to add Prometheus-inspired counters, gauges, and histograms to their Zig applications - for use primarily with &lt;a href="https://github.com/VictoriaMetrics/VictoriaMetrics">VictoriaMetrics&lt;/a>, a Prometheus alternative.&lt;/p>
&lt;h1 id="positron---a-web-renderer-frontend-for-zig-applications">Positron - a web renderer frontend for Zig applications&lt;/h1>
&lt;p>&lt;a href="https://github.com/MasterQ32">@MasterQ32&lt;/a> has released &lt;a href="https://github.com/ziglibs/positron">Positron&lt;/a>, a web renderer frontend for Zig applications. These Zig bindings to the popular &lt;a href="https://github.com/webview/webview">webview&lt;/a> library, enable one to write cross-platform HTML5 UI applications:&lt;/p>
&lt;p>&lt;a href="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/i3-login.png">&lt;img width="240px" src="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/i3-login.png">&lt;/img>&lt;/a> &lt;a href="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/windows-chat.png">&lt;img width="240px" src="https://raw.githubusercontent.com/ziglibs/positron/04af916ddf4dbdf5ae44ef754e1a5ff3af1ddef9/screenshots/windows-chat.png">&lt;/img>&lt;/a>&lt;/p>
&lt;h1 id="zigmod">zigmod&lt;/h1>
&lt;p>&lt;a href="https://github.com/nektro">@nektro&lt;/a> continues her work on &lt;a href="https://github.com/nektro/zigmod">zigmod&lt;/a>, a package manager for the Zig programming language - this month releasing v67 for various bug fixes. The project has now hit over 500 commits and 3.6k lines of code, when you add in the fact that zigmod uses a few handfuls of Zig dependencies - I think it&amp;rsquo;s an interesting large Zig project.&lt;/p>
&lt;p>I should also note an &lt;a href="https://github.com/ziglang/zig/issues/943">official Zig package manager is planned&lt;/a>.&lt;/p>
&lt;h1 id="a-simple-karaoke-player">A simple Karaoke player&lt;/h1>
&lt;p>@captainhorst &lt;a href="https://discord.com/channels/605571803288698900/605572611539206171/873690060950761522">shared in the Zig Discord&lt;/a> their recent project: a simple Karaoke player (note: video has no audio.)&lt;/p>
&lt;p>&lt;a href="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4">video&lt;/a>&lt;/p>
&lt;video width="480px" src="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4" controls="controls" muted="muted">
&lt;a href="https://user-images.githubusercontent.com/3173176/128665375-276d55b5-3b46-4022-bf11-78043a498c04.mp4">
&lt;img width="480px" src="https://user-images.githubusercontent.com/3173176/128806923-49b0425e-b242-4230-87b5-08e0ffe14a53.png">&lt;/img>
&lt;/a>
&lt;/video>
&lt;h1 id="a-path-tracer">A path tracer&lt;/h1>
&lt;p>&lt;a href="https://github.com/msinilo">@msinilo&lt;/a> shares &lt;a href="http://msinilo.pl/blog2/post/zig-pathtracer/">a detailed write-up&lt;/a> and their experience implementing a simple ray tracer in Zig - with no prior Zig experience!&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Iâve to admit I went in completely âblindâ, didnât know much about the language other than some passing remarks posted on Twitter. I kinda expected another Rust, so initially was a bit put off by how âSpartanâ Zig was. After I adjusted and started taking it for what it was â a modern âC+â alternative â it actually became a very fun experiment.&amp;rdquo;&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/3173176/128806390-0b93b3e1-9559-4a4a-85d1-440caec9bc96.png" alt="">&lt;/p>
&lt;h1 id="tutorials">Tutorials&lt;/h1>
&lt;p>&lt;a href="https://kristoff.it">Loris Cro, VP of community at the Zig Software Foundation&lt;/a> has been putting together multiple beginner tutorials over on &lt;a href="https://zig.news">https://zig.news&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://zig.news/kristoff/where-is-print-in-zig-57e9">Where is print() in Zig?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/how-to-add-buffering-to-a-writer-reader-in-zig-7jd">How to Add Buffering to a Reader / Writer in Zig&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-a-string-literal-in-zig-31e9">What&amp;rsquo;s a String Literal in Zig?&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zig.news/kristoff/what-s-undefined-in-zig-9h">What&amp;rsquo;s undefined in Zig?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="see-also">See also&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://corecursive.com/067-zig-with-andrew-kelley/">Full-Time Open Source With Andrew Kelley&lt;/a> (podcast, transcribed)&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>Enjoying Zig monthly? Please consider &lt;a href="https://github.com/sponsors/slimsag">supporting my work&lt;/a>&lt;/p></description></item></channel></rss>